
nios_software.elf:     file format elf32-littlenios2
nios_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00002204 memsz 0x00002204 flags r-x
    LOAD off    0x00003224 vaddr 0x00006224 paddr 0x00006500 align 2**12
         filesz 0x000002dc memsz 0x000002dc flags rw-
    LOAD off    0x000037dc vaddr 0x000067dc paddr 0x000067dc align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  00003500  2**0
                  CONTENTS
  2 .text         0000210c  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f8  0000612c  0000612c  0000312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002dc  00006224  00006500  00003224  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  000067dc  000067dc  000037dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000067f0  000067f0  00003500  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000510  00000000  00000000  00003528  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007503  00000000  00000000  00003a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002620  00000000  00000000  0000af3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002b02  00000000  00000000  0000d55b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a20  00000000  00000000  00010060  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001727  00000000  00000000  00010a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015da  00000000  00000000  000121a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00013784  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  00013798  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000151ed  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000151f0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000151fc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000151fd  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000151fe  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00015202  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00015206  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001520a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00015215  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00015220  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001522b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003d  00000000  00000000  00015236  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0004188b  00000000  00000000  00015273  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
0000612c l    d  .rodata	00000000 .rodata
00006224 l    d  .rwdata	00000000 .rwdata
000067dc l    d  .bss	00000000 .bss
000067f0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 S:/Documents/gitrepos/CPET561/DE1_SoC_Lab7/src/SW/nios_software_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 lab7_0.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000457c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006224 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00004e1c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00004f84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000050c0 l     F .text	00000034 alt_dev_reg
00006304 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
000053a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000054d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00005504 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000056c4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00005824 l     F .text	0000003c alt_get_errno
00005860 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00004f08 g     F .text	0000007c alt_main
000044cc g     F .text	00000080 _puts_r
00006500 g       *ABS*	00000000 __flash_rwdata_start
00004480 g     F .text	0000004c printf
00005b2c g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000067e0 g     O .bss	00000004 errno
000067e8 g     O .bss	00000004 alt_argv
0000e4d8 g       *ABS*	00000000 _gp
00006358 g     O .rwdata	00000180 alt_fd_list
00005b50 g     F .text	00000090 alt_find_dev
000057a8 g     F .text	0000007c alt_io_redirect
0000612c g       *ABS*	00000000 __DTOR_END__
0000454c g     F .text	00000014 puts
00005224 g     F .text	000000ec altera_avalon_jtag_uart_read
00004444 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004d38 g     F .text	00000064 .hidden __udivsi3
000040fc g     F .text	0000012c uint32_ram_test
000064f8 g     O .rwdata	00000004 alt_max_fd
000064e0 g     O .rwdata	00000004 _global_impure_ptr
000067f0 g       *ABS*	00000000 __bss_end
00004228 g     F .text	0000012c uint16_ram_test
00006330 g     O .rwdata	00000028 alt_dev_null
000054b8 g     F .text	00000020 alt_dcache_flush_all
00006500 g       *ABS*	00000000 __ram_rwdata_end
000064f0 g     O .rwdata	00000008 alt_dev_list
00004fc0 g     F .text	00000100 write
00006224 g       *ABS*	00000000 __ram_rodata_end
00004d9c g     F .text	00000058 .hidden __umodsi3
000067f0 g       *ABS*	00000000 end
0000612c g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005310 g     F .text	00000094 altera_avalon_jtag_uart_write
000045e8 g     F .text	0000052c ___vfprintf_internal_r
00005f68 g     F .text	00000190 __call_exitprocs
00004020 g     F .text	0000003c _start
0000512c g     F .text	00000038 alt_sys_init
00005e10 g     F .text	00000158 __register_exitproc
000067dc g     O .bss	00000004 Inferred_ram_be_ptr
00004df4 g     F .text	00000028 .hidden __mulsi3
00006224 g       *ABS*	00000000 __ram_rwdata_start
0000612c g       *ABS*	00000000 __ram_rodata_start
00005164 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00005ce8 g     F .text	000000c4 alt_get_fd
00005de0 g     F .text	00000030 memcmp
000067f0 g       *ABS*	00000000 __alt_stack_base
00005be0 g     F .text	00000108 alt_find_file
00005540 g     F .text	000000a4 alt_dev_llist_insert
00004b30 g     F .text	000000b8 __sfvwrite_small_dev
000067dc g       *ABS*	00000000 __bss_start
0000405c g     F .text	000000a0 main
000067ec g     O .bss	00000004 alt_envp
000051c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000064fc g     O .rwdata	00000004 alt_errno
00004c40 g     F .text	00000084 .hidden __divsi3
0000612c g       *ABS*	00000000 __CTOR_END__
0000612c g       *ABS*	00000000 __flash_rodata_start
0000612c g       *ABS*	00000000 __DTOR_LIST__
000050f4 g     F .text	00000038 alt_irq_init
00005aa8 g     F .text	00000084 alt_release_fd
00005dac g     F .text	00000014 atexit
00004be8 g     F .text	00000058 _write_r
000064e4 g     O .rwdata	00000004 _impure_ptr
000067e4 g     O .bss	00000004 alt_argc
00005644 g     F .text	00000060 _do_dtors
000064e8 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00006500 g       *ABS*	00000000 _edata
000067f0 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
000064d8 g     O .rwdata	00000004 Key_0_ptr
00005dc0 g     F .text	00000020 exit
00004cc4 g     F .text	00000074 .hidden __modsi3
00004354 g     F .text	000000f0 uint8_ram_test
00008000 g       *ABS*	00000000 __alt_data_end
000060f8 g     F .text	00000034 _exit
000064dc g     O .rwdata	00000004 Led_0_ptr
00004560 g     F .text	0000001c strlen
0000594c g     F .text	0000015c open
000056a4 g     F .text	00000020 alt_icache_flush_all
00004b14 g     F .text	0000001c __vfprintf_internal
000055e4 g     F .text	00000060 _do_ctors
000053e0 g     F .text	000000d8 close
00004e84 g     F .text	00000084 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b93614 	ori	gp,gp,58584
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	1099f714 	ori	r2,r2,26588

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d9fc14 	ori	r3,r3,26608

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff5b6c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	0004e840 	call	4e84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	0004f080 	call	4f08 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff5b80>

0000405c <main>:
int main(void)
/*****************************************************************************/
/* Main Program                                                              */
/* Enables interrupts then loops infinitely                                */
/*****************************************************************************/
{
    405c:	defffd04 	addi	sp,sp,-12
    4060:	dfc00215 	stw	ra,8(sp)
    4064:	df000115 	stw	fp,4(sp)
    4068:	df000104 	addi	fp,sp,4
    *Led_0_ptr = 0x00;
    406c:	d0a00117 	ldw	r2,-32764(gp)
    4070:	10000015 	stw	zero,0(r2)
    uint8 flag = 0x00;
    4074:	e03fff05 	stb	zero,-4(fp)

    while(key_0_1 != ( key_0_1 & flag))
    4078:	00001806 	br	40dc <main+0x80>
    {
        uint32_ram_test((uint32*)Inferred_ram_be_ptr,(uint32)ram_size,(uint32)data_32);
    407c:	d0a0c117 	ldw	r2,-31996(gp)
    4080:	01aaf3b4 	movhi	r6,43982
    4084:	31bbc244 	addi	r6,r6,-4343
    4088:	01500004 	movi	r5,16384
    408c:	1009883a 	mov	r4,r2
    4090:	00040fc0 	call	40fc <uint32_ram_test>
        uint16_ram_test((uint16*)Inferred_ram_be_ptr,(uint32)ram_size,(uint16)data_16);
    4094:	d0a0c117 	ldw	r2,-31996(gp)
    4098:	01b72e94 	movui	r6,56506
    409c:	01500004 	movi	r5,16384
    40a0:	1009883a 	mov	r4,r2
    40a4:	00042280 	call	4228 <uint16_ram_test>
        uint8_ram_test ((uint8 *)Inferred_ram_be_ptr,(uint32)ram_size,(uint8 )data_8);
    40a8:	d0a0c117 	ldw	r2,-31996(gp)
    40ac:	01803f84 	movi	r6,254
    40b0:	01500004 	movi	r5,16384
    40b4:	1009883a 	mov	r4,r2
    40b8:	00043540 	call	4354 <uint8_ram_test>
  
        if( key_0_1 == (~(*Key_0_ptr) & key_0_1))
    40bc:	d0a00017 	ldw	r2,-32768(gp)
    40c0:	10800017 	ldw	r2,0(r2)
    40c4:	0084303a 	nor	r2,zero,r2
    40c8:	1080008c 	andi	r2,r2,2
    40cc:	10000326 	beq	r2,zero,40dc <main+0x80>
        {
            flag |= key_0_1;
    40d0:	e0bfff03 	ldbu	r2,-4(fp)
    40d4:	10800094 	ori	r2,r2,2
    40d8:	e0bfff05 	stb	r2,-4(fp)
/*****************************************************************************/
{
    *Led_0_ptr = 0x00;
    uint8 flag = 0x00;

    while(key_0_1 != ( key_0_1 & flag))
    40dc:	e0bfff03 	ldbu	r2,-4(fp)
    40e0:	1080008c 	andi	r2,r2,2
    40e4:	10803fcc 	andi	r2,r2,255
    40e8:	103fe426 	beq	r2,zero,407c <_gp+0xffff5ba4>
        {
            flag |= key_0_1;
        }
    }

    printf("RAM TEXT OVER \n");
    40ec:	01000034 	movhi	r4,0
    40f0:	21184b04 	addi	r4,r4,24876
    40f4:	000454c0 	call	454c <puts>

    while(1);
    40f8:	003fff06 	br	40f8 <_gp+0xffff5c20>

000040fc <uint32_ram_test>:

    return 0;
}

void uint32_ram_test(uint32 * start_ptr ,uint32 size, uint32 data)
{
    40fc:	defff904 	addi	sp,sp,-28
    4100:	dfc00615 	stw	ra,24(sp)
    4104:	df000515 	stw	fp,20(sp)
    4108:	df000504 	addi	fp,sp,20
    410c:	e13ffd15 	stw	r4,-12(fp)
    4110:	e17ffe15 	stw	r5,-8(fp)
    4114:	e1bfff15 	stw	r6,-4(fp)

     size = size/4;
    4118:	e0bffe17 	ldw	r2,-8(fp)
    411c:	1004d0ba 	srli	r2,r2,2
    4120:	e0bffe15 	stw	r2,-8(fp)
     *Led_0_ptr = 0x00;
    4124:	d0a00117 	ldw	r2,-32764(gp)
    4128:	10000015 	stw	zero,0(r2)
     
     for(int i = 0; i< size ;i++)
    412c:	e03ffb15 	stw	zero,-20(fp)
    4130:	00000b06 	br	4160 <uint32_ram_test+0x64>
     {
        start_ptr[i] = data;
    4134:	e0bffb17 	ldw	r2,-20(fp)
    4138:	1085883a 	add	r2,r2,r2
    413c:	1085883a 	add	r2,r2,r2
    4140:	1007883a 	mov	r3,r2
    4144:	e0bffd17 	ldw	r2,-12(fp)
    4148:	10c5883a 	add	r2,r2,r3
    414c:	e0ffff17 	ldw	r3,-4(fp)
    4150:	10c00015 	stw	r3,0(r2)
{

     size = size/4;
     *Led_0_ptr = 0x00;
     
     for(int i = 0; i< size ;i++)
    4154:	e0bffb17 	ldw	r2,-20(fp)
    4158:	10800044 	addi	r2,r2,1
    415c:	e0bffb15 	stw	r2,-20(fp)
    4160:	e0fffb17 	ldw	r3,-20(fp)
    4164:	e0bffe17 	ldw	r2,-8(fp)
    4168:	18bff236 	bltu	r3,r2,4134 <_gp+0xffff5c5c>
     {
        start_ptr[i] = data;
     }
     
    for(int i = 0; i< size ;i++)
    416c:	e03ffc15 	stw	zero,-16(fp)
    4170:	00002406 	br	4204 <uint32_ram_test+0x108>
    {
        if (start_ptr[i] != data)
    4174:	e0bffc17 	ldw	r2,-16(fp)
    4178:	1085883a 	add	r2,r2,r2
    417c:	1085883a 	add	r2,r2,r2
    4180:	1007883a 	mov	r3,r2
    4184:	e0bffd17 	ldw	r2,-12(fp)
    4188:	10c5883a 	add	r2,r2,r3
    418c:	10c00017 	ldw	r3,0(r2)
    4190:	e0bfff17 	ldw	r2,-4(fp)
    4194:	18801826 	beq	r3,r2,41f8 <uint32_ram_test+0xfc>
        {
            printf("ERROR : Address : %08lx : Read : %08lx : Expected : %08lx \n",(void*)&start_ptr[i], start_ptr[i],data);
    4198:	e0bffc17 	ldw	r2,-16(fp)
    419c:	1085883a 	add	r2,r2,r2
    41a0:	1085883a 	add	r2,r2,r2
    41a4:	1007883a 	mov	r3,r2
    41a8:	e0bffd17 	ldw	r2,-12(fp)
    41ac:	10c7883a 	add	r3,r2,r3
    41b0:	e0bffc17 	ldw	r2,-16(fp)
    41b4:	1085883a 	add	r2,r2,r2
    41b8:	1085883a 	add	r2,r2,r2
    41bc:	1009883a 	mov	r4,r2
    41c0:	e0bffd17 	ldw	r2,-12(fp)
    41c4:	1105883a 	add	r2,r2,r4
    41c8:	10800017 	ldw	r2,0(r2)
    41cc:	e1ffff17 	ldw	r7,-4(fp)
    41d0:	100d883a 	mov	r6,r2
    41d4:	180b883a 	mov	r5,r3
    41d8:	01000034 	movhi	r4,0
    41dc:	21184f04 	addi	r4,r4,24892
    41e0:	00044800 	call	4480 <printf>
            *Led_0_ptr |= 0xFF;
    41e4:	d0a00117 	ldw	r2,-32764(gp)
    41e8:	d0e00117 	ldw	r3,-32764(gp)
    41ec:	18c00017 	ldw	r3,0(r3)
    41f0:	18c03fd4 	ori	r3,r3,255
    41f4:	10c00015 	stw	r3,0(r2)
     for(int i = 0; i< size ;i++)
     {
        start_ptr[i] = data;
     }
     
    for(int i = 0; i< size ;i++)
    41f8:	e0bffc17 	ldw	r2,-16(fp)
    41fc:	10800044 	addi	r2,r2,1
    4200:	e0bffc15 	stw	r2,-16(fp)
    4204:	e0fffc17 	ldw	r3,-16(fp)
    4208:	e0bffe17 	ldw	r2,-8(fp)
    420c:	18bfd936 	bltu	r3,r2,4174 <_gp+0xffff5c9c>
        {
            printf("ERROR : Address : %08lx : Read : %08lx : Expected : %08lx \n",(void*)&start_ptr[i], start_ptr[i],data);
            *Led_0_ptr |= 0xFF;
        };
    }
}
    4210:	0001883a 	nop
    4214:	e037883a 	mov	sp,fp
    4218:	dfc00117 	ldw	ra,4(sp)
    421c:	df000017 	ldw	fp,0(sp)
    4220:	dec00204 	addi	sp,sp,8
    4224:	f800283a 	ret

00004228 <uint16_ram_test>:

void uint16_ram_test(uint16 * start_ptr ,uint32 size, uint16 data)
{
    4228:	defff904 	addi	sp,sp,-28
    422c:	dfc00615 	stw	ra,24(sp)
    4230:	df000515 	stw	fp,20(sp)
    4234:	df000504 	addi	fp,sp,20
    4238:	e13ffd15 	stw	r4,-12(fp)
    423c:	e17ffe15 	stw	r5,-8(fp)
    4240:	3005883a 	mov	r2,r6
    4244:	e0bfff0d 	sth	r2,-4(fp)

    size = size/2;
    4248:	e0bffe17 	ldw	r2,-8(fp)
    424c:	1004d07a 	srli	r2,r2,1
    4250:	e0bffe15 	stw	r2,-8(fp)
    *Led_0_ptr = 0x00;
    4254:	d0a00117 	ldw	r2,-32764(gp)
    4258:	10000015 	stw	zero,0(r2)
    
    for(int i = 0; i< size ;i++)
    425c:	e03ffb15 	stw	zero,-20(fp)
    4260:	00000a06 	br	428c <uint16_ram_test+0x64>
    {
        start_ptr[i] = data;
    4264:	e0bffb17 	ldw	r2,-20(fp)
    4268:	1085883a 	add	r2,r2,r2
    426c:	1007883a 	mov	r3,r2
    4270:	e0bffd17 	ldw	r2,-12(fp)
    4274:	10c5883a 	add	r2,r2,r3
    4278:	e0ffff0b 	ldhu	r3,-4(fp)
    427c:	10c0000d 	sth	r3,0(r2)
{

    size = size/2;
    *Led_0_ptr = 0x00;
    
    for(int i = 0; i< size ;i++)
    4280:	e0bffb17 	ldw	r2,-20(fp)
    4284:	10800044 	addi	r2,r2,1
    4288:	e0bffb15 	stw	r2,-20(fp)
    428c:	e0fffb17 	ldw	r3,-20(fp)
    4290:	e0bffe17 	ldw	r2,-8(fp)
    4294:	18bff336 	bltu	r3,r2,4264 <_gp+0xffff5d8c>
    {
        start_ptr[i] = data;
    }
    
    for(int i = 0; i< size ;i++)
    4298:	e03ffc15 	stw	zero,-16(fp)
    429c:	00002406 	br	4330 <uint16_ram_test+0x108>
    {
        if (start_ptr[i] != data)
    42a0:	e0bffc17 	ldw	r2,-16(fp)
    42a4:	1085883a 	add	r2,r2,r2
    42a8:	1007883a 	mov	r3,r2
    42ac:	e0bffd17 	ldw	r2,-12(fp)
    42b0:	10c5883a 	add	r2,r2,r3
    42b4:	1080000b 	ldhu	r2,0(r2)
    42b8:	10ffffcc 	andi	r3,r2,65535
    42bc:	e0bfff0b 	ldhu	r2,-4(fp)
    42c0:	18801826 	beq	r3,r2,4324 <uint16_ram_test+0xfc>
        {
            printf("ERROR : Address : %08lx : Read : %04x : Expected : %04x \n",(void*)&start_ptr[i], start_ptr[i],data);
    42c4:	e0bffc17 	ldw	r2,-16(fp)
    42c8:	1085883a 	add	r2,r2,r2
    42cc:	1007883a 	mov	r3,r2
    42d0:	e0bffd17 	ldw	r2,-12(fp)
    42d4:	10c7883a 	add	r3,r2,r3
    42d8:	e0bffc17 	ldw	r2,-16(fp)
    42dc:	1085883a 	add	r2,r2,r2
    42e0:	1009883a 	mov	r4,r2
    42e4:	e0bffd17 	ldw	r2,-12(fp)
    42e8:	1105883a 	add	r2,r2,r4
    42ec:	1080000b 	ldhu	r2,0(r2)
    42f0:	10bfffcc 	andi	r2,r2,65535
    42f4:	e13fff0b 	ldhu	r4,-4(fp)
    42f8:	200f883a 	mov	r7,r4
    42fc:	100d883a 	mov	r6,r2
    4300:	180b883a 	mov	r5,r3
    4304:	01000034 	movhi	r4,0
    4308:	21185e04 	addi	r4,r4,24952
    430c:	00044800 	call	4480 <printf>
            *Led_0_ptr |= 0xFF;
    4310:	d0a00117 	ldw	r2,-32764(gp)
    4314:	d0e00117 	ldw	r3,-32764(gp)
    4318:	18c00017 	ldw	r3,0(r3)
    431c:	18c03fd4 	ori	r3,r3,255
    4320:	10c00015 	stw	r3,0(r2)
    for(int i = 0; i< size ;i++)
    {
        start_ptr[i] = data;
    }
    
    for(int i = 0; i< size ;i++)
    4324:	e0bffc17 	ldw	r2,-16(fp)
    4328:	10800044 	addi	r2,r2,1
    432c:	e0bffc15 	stw	r2,-16(fp)
    4330:	e0fffc17 	ldw	r3,-16(fp)
    4334:	e0bffe17 	ldw	r2,-8(fp)
    4338:	18bfd936 	bltu	r3,r2,42a0 <_gp+0xffff5dc8>
        {
            printf("ERROR : Address : %08lx : Read : %04x : Expected : %04x \n",(void*)&start_ptr[i], start_ptr[i],data);
            *Led_0_ptr |= 0xFF;
        };
    }
}
    433c:	0001883a 	nop
    4340:	e037883a 	mov	sp,fp
    4344:	dfc00117 	ldw	ra,4(sp)
    4348:	df000017 	ldw	fp,0(sp)
    434c:	dec00204 	addi	sp,sp,8
    4350:	f800283a 	ret

00004354 <uint8_ram_test>:

void uint8_ram_test(uint8 * start_ptr ,uint32 size, uint8 data)
{
    4354:	defff904 	addi	sp,sp,-28
    4358:	dfc00615 	stw	ra,24(sp)
    435c:	df000515 	stw	fp,20(sp)
    4360:	df000504 	addi	fp,sp,20
    4364:	e13ffd15 	stw	r4,-12(fp)
    4368:	e17ffe15 	stw	r5,-8(fp)
    436c:	3005883a 	mov	r2,r6
    4370:	e0bfff05 	stb	r2,-4(fp)
    for(int i = 0; i< size ;i++)
    4374:	e03ffb15 	stw	zero,-20(fp)
    4378:	00000806 	br	439c <uint8_ram_test+0x48>
    {
        start_ptr[i] = data;
    437c:	e0bffb17 	ldw	r2,-20(fp)
    4380:	e0fffd17 	ldw	r3,-12(fp)
    4384:	1885883a 	add	r2,r3,r2
    4388:	e0ffff03 	ldbu	r3,-4(fp)
    438c:	10c00005 	stb	r3,0(r2)
    }
}

void uint8_ram_test(uint8 * start_ptr ,uint32 size, uint8 data)
{
    for(int i = 0; i< size ;i++)
    4390:	e0bffb17 	ldw	r2,-20(fp)
    4394:	10800044 	addi	r2,r2,1
    4398:	e0bffb15 	stw	r2,-20(fp)
    439c:	e0fffb17 	ldw	r3,-20(fp)
    43a0:	e0bffe17 	ldw	r2,-8(fp)
    43a4:	18bff536 	bltu	r3,r2,437c <_gp+0xffff5ea4>
    {
        start_ptr[i] = data;
    }
  
    for(int i = 0; i< size ;i++)
    43a8:	e03ffc15 	stw	zero,-16(fp)
    43ac:	00001c06 	br	4420 <uint8_ram_test+0xcc>
    {
        if (start_ptr[i] != data)
    43b0:	e0bffc17 	ldw	r2,-16(fp)
    43b4:	e0fffd17 	ldw	r3,-12(fp)
    43b8:	1885883a 	add	r2,r3,r2
    43bc:	10800003 	ldbu	r2,0(r2)
    43c0:	10c03fcc 	andi	r3,r2,255
    43c4:	e0bfff03 	ldbu	r2,-4(fp)
    43c8:	18801226 	beq	r3,r2,4414 <uint8_ram_test+0xc0>
        {
            printf("ERROR : Address : %08lx : Read : %x : Expected : %x \n",(void*)&start_ptr[i], start_ptr[i],data);
    43cc:	e0bffc17 	ldw	r2,-16(fp)
    43d0:	e0fffd17 	ldw	r3,-12(fp)
    43d4:	1889883a 	add	r4,r3,r2
    43d8:	e0bffc17 	ldw	r2,-16(fp)
    43dc:	e0fffd17 	ldw	r3,-12(fp)
    43e0:	1885883a 	add	r2,r3,r2
    43e4:	10800003 	ldbu	r2,0(r2)
    43e8:	10803fcc 	andi	r2,r2,255
    43ec:	e0ffff03 	ldbu	r3,-4(fp)
    43f0:	180f883a 	mov	r7,r3
    43f4:	100d883a 	mov	r6,r2
    43f8:	200b883a 	mov	r5,r4
    43fc:	01000034 	movhi	r4,0
    4400:	21186d04 	addi	r4,r4,25012
    4404:	00044800 	call	4480 <printf>
            *Led_0_ptr = 0xff;
    4408:	d0a00117 	ldw	r2,-32764(gp)
    440c:	00c03fc4 	movi	r3,255
    4410:	10c00015 	stw	r3,0(r2)
    for(int i = 0; i< size ;i++)
    {
        start_ptr[i] = data;
    }
  
    for(int i = 0; i< size ;i++)
    4414:	e0bffc17 	ldw	r2,-16(fp)
    4418:	10800044 	addi	r2,r2,1
    441c:	e0bffc15 	stw	r2,-16(fp)
    4420:	e0fffc17 	ldw	r3,-16(fp)
    4424:	e0bffe17 	ldw	r2,-8(fp)
    4428:	18bfe136 	bltu	r3,r2,43b0 <_gp+0xffff5ed8>
        {
            printf("ERROR : Address : %08lx : Read : %x : Expected : %x \n",(void*)&start_ptr[i], start_ptr[i],data);
            *Led_0_ptr = 0xff;
        };
    }
}
    442c:	0001883a 	nop
    4430:	e037883a 	mov	sp,fp
    4434:	dfc00117 	ldw	ra,4(sp)
    4438:	df000017 	ldw	fp,0(sp)
    443c:	dec00204 	addi	sp,sp,8
    4440:	f800283a 	ret

00004444 <_printf_r>:
    4444:	defffd04 	addi	sp,sp,-12
    4448:	dfc00015 	stw	ra,0(sp)
    444c:	d9800115 	stw	r6,4(sp)
    4450:	d9c00215 	stw	r7,8(sp)
    4454:	20c00217 	ldw	r3,8(r4)
    4458:	01800034 	movhi	r6,0
    445c:	3192cc04 	addi	r6,r6,19248
    4460:	19800115 	stw	r6,4(r3)
    4464:	280d883a 	mov	r6,r5
    4468:	21400217 	ldw	r5,8(r4)
    446c:	d9c00104 	addi	r7,sp,4
    4470:	00045e80 	call	45e8 <___vfprintf_internal_r>
    4474:	dfc00017 	ldw	ra,0(sp)
    4478:	dec00304 	addi	sp,sp,12
    447c:	f800283a 	ret

00004480 <printf>:
    4480:	defffc04 	addi	sp,sp,-16
    4484:	dfc00015 	stw	ra,0(sp)
    4488:	d9400115 	stw	r5,4(sp)
    448c:	d9800215 	stw	r6,8(sp)
    4490:	d9c00315 	stw	r7,12(sp)
    4494:	00800034 	movhi	r2,0
    4498:	10993904 	addi	r2,r2,25828
    449c:	10800017 	ldw	r2,0(r2)
    44a0:	01400034 	movhi	r5,0
    44a4:	2952cc04 	addi	r5,r5,19248
    44a8:	10c00217 	ldw	r3,8(r2)
    44ac:	d9800104 	addi	r6,sp,4
    44b0:	19400115 	stw	r5,4(r3)
    44b4:	200b883a 	mov	r5,r4
    44b8:	11000217 	ldw	r4,8(r2)
    44bc:	0004b140 	call	4b14 <__vfprintf_internal>
    44c0:	dfc00017 	ldw	ra,0(sp)
    44c4:	dec00404 	addi	sp,sp,16
    44c8:	f800283a 	ret

000044cc <_puts_r>:
    44cc:	defffd04 	addi	sp,sp,-12
    44d0:	dc000015 	stw	r16,0(sp)
    44d4:	2021883a 	mov	r16,r4
    44d8:	2809883a 	mov	r4,r5
    44dc:	dfc00215 	stw	ra,8(sp)
    44e0:	dc400115 	stw	r17,4(sp)
    44e4:	2823883a 	mov	r17,r5
    44e8:	00045600 	call	4560 <strlen>
    44ec:	81400217 	ldw	r5,8(r16)
    44f0:	01000034 	movhi	r4,0
    44f4:	2112cc04 	addi	r4,r4,19248
    44f8:	29000115 	stw	r4,4(r5)
    44fc:	100f883a 	mov	r7,r2
    4500:	880d883a 	mov	r6,r17
    4504:	8009883a 	mov	r4,r16
    4508:	0004b300 	call	4b30 <__sfvwrite_small_dev>
    450c:	00ffffc4 	movi	r3,-1
    4510:	10c00926 	beq	r2,r3,4538 <_puts_r+0x6c>
    4514:	81400217 	ldw	r5,8(r16)
    4518:	01800034 	movhi	r6,0
    451c:	01c00044 	movi	r7,1
    4520:	28800117 	ldw	r2,4(r5)
    4524:	31987b04 	addi	r6,r6,25068
    4528:	8009883a 	mov	r4,r16
    452c:	103ee83a 	callr	r2
    4530:	10bfffe0 	cmpeqi	r2,r2,-1
    4534:	0085c83a 	sub	r2,zero,r2
    4538:	dfc00217 	ldw	ra,8(sp)
    453c:	dc400117 	ldw	r17,4(sp)
    4540:	dc000017 	ldw	r16,0(sp)
    4544:	dec00304 	addi	sp,sp,12
    4548:	f800283a 	ret

0000454c <puts>:
    454c:	00800034 	movhi	r2,0
    4550:	10993904 	addi	r2,r2,25828
    4554:	200b883a 	mov	r5,r4
    4558:	11000017 	ldw	r4,0(r2)
    455c:	00044cc1 	jmpi	44cc <_puts_r>

00004560 <strlen>:
    4560:	2005883a 	mov	r2,r4
    4564:	10c00007 	ldb	r3,0(r2)
    4568:	18000226 	beq	r3,zero,4574 <strlen+0x14>
    456c:	10800044 	addi	r2,r2,1
    4570:	003ffc06 	br	4564 <_gp+0xffff608c>
    4574:	1105c83a 	sub	r2,r2,r4
    4578:	f800283a 	ret

0000457c <print_repeat>:
    457c:	defffb04 	addi	sp,sp,-20
    4580:	dc800315 	stw	r18,12(sp)
    4584:	dc400215 	stw	r17,8(sp)
    4588:	dc000115 	stw	r16,4(sp)
    458c:	dfc00415 	stw	ra,16(sp)
    4590:	2025883a 	mov	r18,r4
    4594:	2823883a 	mov	r17,r5
    4598:	d9800005 	stb	r6,0(sp)
    459c:	3821883a 	mov	r16,r7
    45a0:	04000a0e 	bge	zero,r16,45cc <print_repeat+0x50>
    45a4:	88800117 	ldw	r2,4(r17)
    45a8:	01c00044 	movi	r7,1
    45ac:	d80d883a 	mov	r6,sp
    45b0:	880b883a 	mov	r5,r17
    45b4:	9009883a 	mov	r4,r18
    45b8:	103ee83a 	callr	r2
    45bc:	843fffc4 	addi	r16,r16,-1
    45c0:	103ff726 	beq	r2,zero,45a0 <_gp+0xffff60c8>
    45c4:	00bfffc4 	movi	r2,-1
    45c8:	00000106 	br	45d0 <print_repeat+0x54>
    45cc:	0005883a 	mov	r2,zero
    45d0:	dfc00417 	ldw	ra,16(sp)
    45d4:	dc800317 	ldw	r18,12(sp)
    45d8:	dc400217 	ldw	r17,8(sp)
    45dc:	dc000117 	ldw	r16,4(sp)
    45e0:	dec00504 	addi	sp,sp,20
    45e4:	f800283a 	ret

000045e8 <___vfprintf_internal_r>:
    45e8:	deffe504 	addi	sp,sp,-108
    45ec:	d8c00804 	addi	r3,sp,32
    45f0:	ddc01815 	stw	r23,96(sp)
    45f4:	dd801715 	stw	r22,92(sp)
    45f8:	dd401615 	stw	r21,88(sp)
    45fc:	dd001515 	stw	r20,84(sp)
    4600:	dcc01415 	stw	r19,80(sp)
    4604:	dc801315 	stw	r18,76(sp)
    4608:	dc401215 	stw	r17,72(sp)
    460c:	dc001115 	stw	r16,68(sp)
    4610:	dfc01a15 	stw	ra,104(sp)
    4614:	df001915 	stw	fp,100(sp)
    4618:	2029883a 	mov	r20,r4
    461c:	2823883a 	mov	r17,r5
    4620:	382d883a 	mov	r22,r7
    4624:	d9800f15 	stw	r6,60(sp)
    4628:	0021883a 	mov	r16,zero
    462c:	d8000e15 	stw	zero,56(sp)
    4630:	d8000a15 	stw	zero,40(sp)
    4634:	002b883a 	mov	r21,zero
    4638:	0027883a 	mov	r19,zero
    463c:	0025883a 	mov	r18,zero
    4640:	d8000c15 	stw	zero,48(sp)
    4644:	d8000b15 	stw	zero,44(sp)
    4648:	002f883a 	mov	r23,zero
    464c:	d8c00915 	stw	r3,36(sp)
    4650:	d8c00f17 	ldw	r3,60(sp)
    4654:	19000003 	ldbu	r4,0(r3)
    4658:	20803fcc 	andi	r2,r4,255
    465c:	1080201c 	xori	r2,r2,128
    4660:	10bfe004 	addi	r2,r2,-128
    4664:	10011e26 	beq	r2,zero,4ae0 <___vfprintf_internal_r+0x4f8>
    4668:	00c00044 	movi	r3,1
    466c:	b8c01426 	beq	r23,r3,46c0 <___vfprintf_internal_r+0xd8>
    4670:	1dc00216 	blt	r3,r23,467c <___vfprintf_internal_r+0x94>
    4674:	b8000626 	beq	r23,zero,4690 <___vfprintf_internal_r+0xa8>
    4678:	00011506 	br	4ad0 <___vfprintf_internal_r+0x4e8>
    467c:	01400084 	movi	r5,2
    4680:	b9401d26 	beq	r23,r5,46f8 <___vfprintf_internal_r+0x110>
    4684:	014000c4 	movi	r5,3
    4688:	b9402b26 	beq	r23,r5,4738 <___vfprintf_internal_r+0x150>
    468c:	00011006 	br	4ad0 <___vfprintf_internal_r+0x4e8>
    4690:	01400944 	movi	r5,37
    4694:	1140fc26 	beq	r2,r5,4a88 <___vfprintf_internal_r+0x4a0>
    4698:	88800117 	ldw	r2,4(r17)
    469c:	d9000005 	stb	r4,0(sp)
    46a0:	01c00044 	movi	r7,1
    46a4:	d80d883a 	mov	r6,sp
    46a8:	880b883a 	mov	r5,r17
    46ac:	a009883a 	mov	r4,r20
    46b0:	103ee83a 	callr	r2
    46b4:	1000d81e 	bne	r2,zero,4a18 <___vfprintf_internal_r+0x430>
    46b8:	84000044 	addi	r16,r16,1
    46bc:	00010406 	br	4ad0 <___vfprintf_internal_r+0x4e8>
    46c0:	01400c04 	movi	r5,48
    46c4:	1140fa26 	beq	r2,r5,4ab0 <___vfprintf_internal_r+0x4c8>
    46c8:	01400944 	movi	r5,37
    46cc:	11400a1e 	bne	r2,r5,46f8 <___vfprintf_internal_r+0x110>
    46d0:	d8800005 	stb	r2,0(sp)
    46d4:	88800117 	ldw	r2,4(r17)
    46d8:	b80f883a 	mov	r7,r23
    46dc:	d80d883a 	mov	r6,sp
    46e0:	880b883a 	mov	r5,r17
    46e4:	a009883a 	mov	r4,r20
    46e8:	103ee83a 	callr	r2
    46ec:	1000ca1e 	bne	r2,zero,4a18 <___vfprintf_internal_r+0x430>
    46f0:	84000044 	addi	r16,r16,1
    46f4:	0000f506 	br	4acc <___vfprintf_internal_r+0x4e4>
    46f8:	25fff404 	addi	r23,r4,-48
    46fc:	bdc03fcc 	andi	r23,r23,255
    4700:	00c00244 	movi	r3,9
    4704:	1dc00936 	bltu	r3,r23,472c <___vfprintf_internal_r+0x144>
    4708:	00bfffc4 	movi	r2,-1
    470c:	90800426 	beq	r18,r2,4720 <___vfprintf_internal_r+0x138>
    4710:	01400284 	movi	r5,10
    4714:	9009883a 	mov	r4,r18
    4718:	0004df40 	call	4df4 <__mulsi3>
    471c:	00000106 	br	4724 <___vfprintf_internal_r+0x13c>
    4720:	0005883a 	mov	r2,zero
    4724:	b8a5883a 	add	r18,r23,r2
    4728:	0000e206 	br	4ab4 <___vfprintf_internal_r+0x4cc>
    472c:	01400b84 	movi	r5,46
    4730:	1140e426 	beq	r2,r5,4ac4 <___vfprintf_internal_r+0x4dc>
    4734:	05c00084 	movi	r23,2
    4738:	213ff404 	addi	r4,r4,-48
    473c:	27003fcc 	andi	fp,r4,255
    4740:	00c00244 	movi	r3,9
    4744:	1f000936 	bltu	r3,fp,476c <___vfprintf_internal_r+0x184>
    4748:	00bfffc4 	movi	r2,-1
    474c:	98800426 	beq	r19,r2,4760 <___vfprintf_internal_r+0x178>
    4750:	01400284 	movi	r5,10
    4754:	9809883a 	mov	r4,r19
    4758:	0004df40 	call	4df4 <__mulsi3>
    475c:	00000106 	br	4764 <___vfprintf_internal_r+0x17c>
    4760:	0005883a 	mov	r2,zero
    4764:	e0a7883a 	add	r19,fp,r2
    4768:	0000d906 	br	4ad0 <___vfprintf_internal_r+0x4e8>
    476c:	00c01b04 	movi	r3,108
    4770:	10c0d226 	beq	r2,r3,4abc <___vfprintf_internal_r+0x4d4>
    4774:	013fffc4 	movi	r4,-1
    4778:	99000226 	beq	r19,r4,4784 <___vfprintf_internal_r+0x19c>
    477c:	d8000b15 	stw	zero,44(sp)
    4780:	00000106 	br	4788 <___vfprintf_internal_r+0x1a0>
    4784:	04c00044 	movi	r19,1
    4788:	01001a44 	movi	r4,105
    478c:	11001626 	beq	r2,r4,47e8 <___vfprintf_internal_r+0x200>
    4790:	20800916 	blt	r4,r2,47b8 <___vfprintf_internal_r+0x1d0>
    4794:	010018c4 	movi	r4,99
    4798:	11008826 	beq	r2,r4,49bc <___vfprintf_internal_r+0x3d4>
    479c:	01001904 	movi	r4,100
    47a0:	11001126 	beq	r2,r4,47e8 <___vfprintf_internal_r+0x200>
    47a4:	01001604 	movi	r4,88
    47a8:	1100c81e 	bne	r2,r4,4acc <___vfprintf_internal_r+0x4e4>
    47ac:	00c00044 	movi	r3,1
    47b0:	d8c00e15 	stw	r3,56(sp)
    47b4:	00001506 	br	480c <___vfprintf_internal_r+0x224>
    47b8:	01001cc4 	movi	r4,115
    47bc:	11009826 	beq	r2,r4,4a20 <___vfprintf_internal_r+0x438>
    47c0:	20800416 	blt	r4,r2,47d4 <___vfprintf_internal_r+0x1ec>
    47c4:	01001bc4 	movi	r4,111
    47c8:	1100c01e 	bne	r2,r4,4acc <___vfprintf_internal_r+0x4e4>
    47cc:	05400204 	movi	r21,8
    47d0:	00000f06 	br	4810 <___vfprintf_internal_r+0x228>
    47d4:	01001d44 	movi	r4,117
    47d8:	11000d26 	beq	r2,r4,4810 <___vfprintf_internal_r+0x228>
    47dc:	01001e04 	movi	r4,120
    47e0:	11000a26 	beq	r2,r4,480c <___vfprintf_internal_r+0x224>
    47e4:	0000b906 	br	4acc <___vfprintf_internal_r+0x4e4>
    47e8:	d8c00a17 	ldw	r3,40(sp)
    47ec:	b7000104 	addi	fp,r22,4
    47f0:	18000726 	beq	r3,zero,4810 <___vfprintf_internal_r+0x228>
    47f4:	df000d15 	stw	fp,52(sp)
    47f8:	b5c00017 	ldw	r23,0(r22)
    47fc:	b800080e 	bge	r23,zero,4820 <___vfprintf_internal_r+0x238>
    4800:	05efc83a 	sub	r23,zero,r23
    4804:	02400044 	movi	r9,1
    4808:	00000606 	br	4824 <___vfprintf_internal_r+0x23c>
    480c:	05400404 	movi	r21,16
    4810:	b0c00104 	addi	r3,r22,4
    4814:	d8c00d15 	stw	r3,52(sp)
    4818:	b5c00017 	ldw	r23,0(r22)
    481c:	d8000a15 	stw	zero,40(sp)
    4820:	0013883a 	mov	r9,zero
    4824:	d839883a 	mov	fp,sp
    4828:	b8001726 	beq	r23,zero,4888 <___vfprintf_internal_r+0x2a0>
    482c:	a80b883a 	mov	r5,r21
    4830:	b809883a 	mov	r4,r23
    4834:	da401015 	stw	r9,64(sp)
    4838:	0004d380 	call	4d38 <__udivsi3>
    483c:	a80b883a 	mov	r5,r21
    4840:	1009883a 	mov	r4,r2
    4844:	102d883a 	mov	r22,r2
    4848:	0004df40 	call	4df4 <__mulsi3>
    484c:	b885c83a 	sub	r2,r23,r2
    4850:	00c00244 	movi	r3,9
    4854:	da401017 	ldw	r9,64(sp)
    4858:	18800216 	blt	r3,r2,4864 <___vfprintf_internal_r+0x27c>
    485c:	10800c04 	addi	r2,r2,48
    4860:	00000506 	br	4878 <___vfprintf_internal_r+0x290>
    4864:	d8c00e17 	ldw	r3,56(sp)
    4868:	18000226 	beq	r3,zero,4874 <___vfprintf_internal_r+0x28c>
    486c:	10800dc4 	addi	r2,r2,55
    4870:	00000106 	br	4878 <___vfprintf_internal_r+0x290>
    4874:	108015c4 	addi	r2,r2,87
    4878:	e0800005 	stb	r2,0(fp)
    487c:	b02f883a 	mov	r23,r22
    4880:	e7000044 	addi	fp,fp,1
    4884:	003fe806 	br	4828 <_gp+0xffff6350>
    4888:	e6efc83a 	sub	r23,fp,sp
    488c:	9dc5c83a 	sub	r2,r19,r23
    4890:	0080090e 	bge	zero,r2,48b8 <___vfprintf_internal_r+0x2d0>
    4894:	e085883a 	add	r2,fp,r2
    4898:	01400c04 	movi	r5,48
    489c:	d8c00917 	ldw	r3,36(sp)
    48a0:	e009883a 	mov	r4,fp
    48a4:	e0c0032e 	bgeu	fp,r3,48b4 <___vfprintf_internal_r+0x2cc>
    48a8:	e7000044 	addi	fp,fp,1
    48ac:	21400005 	stb	r5,0(r4)
    48b0:	e0bffa1e 	bne	fp,r2,489c <_gp+0xffff63c4>
    48b4:	e6efc83a 	sub	r23,fp,sp
    48b8:	d8c00b17 	ldw	r3,44(sp)
    48bc:	4dd1883a 	add	r8,r9,r23
    48c0:	922dc83a 	sub	r22,r18,r8
    48c4:	18001626 	beq	r3,zero,4920 <___vfprintf_internal_r+0x338>
    48c8:	48000a26 	beq	r9,zero,48f4 <___vfprintf_internal_r+0x30c>
    48cc:	00800b44 	movi	r2,45
    48d0:	d8800805 	stb	r2,32(sp)
    48d4:	88800117 	ldw	r2,4(r17)
    48d8:	01c00044 	movi	r7,1
    48dc:	d9800804 	addi	r6,sp,32
    48e0:	880b883a 	mov	r5,r17
    48e4:	a009883a 	mov	r4,r20
    48e8:	103ee83a 	callr	r2
    48ec:	10004a1e 	bne	r2,zero,4a18 <___vfprintf_internal_r+0x430>
    48f0:	84000044 	addi	r16,r16,1
    48f4:	0580070e 	bge	zero,r22,4914 <___vfprintf_internal_r+0x32c>
    48f8:	b00f883a 	mov	r7,r22
    48fc:	01800c04 	movi	r6,48
    4900:	880b883a 	mov	r5,r17
    4904:	a009883a 	mov	r4,r20
    4908:	000457c0 	call	457c <print_repeat>
    490c:	1000421e 	bne	r2,zero,4a18 <___vfprintf_internal_r+0x430>
    4910:	85a1883a 	add	r16,r16,r22
    4914:	e02d883a 	mov	r22,fp
    4918:	bf2fc83a 	sub	r23,r23,fp
    491c:	00002006 	br	49a0 <___vfprintf_internal_r+0x3b8>
    4920:	0580090e 	bge	zero,r22,4948 <___vfprintf_internal_r+0x360>
    4924:	b00f883a 	mov	r7,r22
    4928:	01800804 	movi	r6,32
    492c:	880b883a 	mov	r5,r17
    4930:	a009883a 	mov	r4,r20
    4934:	da401015 	stw	r9,64(sp)
    4938:	000457c0 	call	457c <print_repeat>
    493c:	da401017 	ldw	r9,64(sp)
    4940:	1000351e 	bne	r2,zero,4a18 <___vfprintf_internal_r+0x430>
    4944:	85a1883a 	add	r16,r16,r22
    4948:	483ff226 	beq	r9,zero,4914 <_gp+0xffff643c>
    494c:	00800b44 	movi	r2,45
    4950:	d8800805 	stb	r2,32(sp)
    4954:	88800117 	ldw	r2,4(r17)
    4958:	01c00044 	movi	r7,1
    495c:	d9800804 	addi	r6,sp,32
    4960:	880b883a 	mov	r5,r17
    4964:	a009883a 	mov	r4,r20
    4968:	103ee83a 	callr	r2
    496c:	10002a1e 	bne	r2,zero,4a18 <___vfprintf_internal_r+0x430>
    4970:	84000044 	addi	r16,r16,1
    4974:	003fe706 	br	4914 <_gp+0xffff643c>
    4978:	b5bfffc4 	addi	r22,r22,-1
    497c:	b0800003 	ldbu	r2,0(r22)
    4980:	01c00044 	movi	r7,1
    4984:	d9800804 	addi	r6,sp,32
    4988:	d8800805 	stb	r2,32(sp)
    498c:	88800117 	ldw	r2,4(r17)
    4990:	880b883a 	mov	r5,r17
    4994:	a009883a 	mov	r4,r20
    4998:	103ee83a 	callr	r2
    499c:	10001e1e 	bne	r2,zero,4a18 <___vfprintf_internal_r+0x430>
    49a0:	8585c83a 	sub	r2,r16,r22
    49a4:	b5c9883a 	add	r4,r22,r23
    49a8:	e085883a 	add	r2,fp,r2
    49ac:	013ff216 	blt	zero,r4,4978 <_gp+0xffff64a0>
    49b0:	1021883a 	mov	r16,r2
    49b4:	dd800d17 	ldw	r22,52(sp)
    49b8:	00004406 	br	4acc <___vfprintf_internal_r+0x4e4>
    49bc:	00800044 	movi	r2,1
    49c0:	1480080e 	bge	r2,r18,49e4 <___vfprintf_internal_r+0x3fc>
    49c4:	95ffffc4 	addi	r23,r18,-1
    49c8:	b80f883a 	mov	r7,r23
    49cc:	01800804 	movi	r6,32
    49d0:	880b883a 	mov	r5,r17
    49d4:	a009883a 	mov	r4,r20
    49d8:	000457c0 	call	457c <print_repeat>
    49dc:	10000e1e 	bne	r2,zero,4a18 <___vfprintf_internal_r+0x430>
    49e0:	85e1883a 	add	r16,r16,r23
    49e4:	b0800017 	ldw	r2,0(r22)
    49e8:	01c00044 	movi	r7,1
    49ec:	d80d883a 	mov	r6,sp
    49f0:	d8800005 	stb	r2,0(sp)
    49f4:	88800117 	ldw	r2,4(r17)
    49f8:	880b883a 	mov	r5,r17
    49fc:	a009883a 	mov	r4,r20
    4a00:	b5c00104 	addi	r23,r22,4
    4a04:	103ee83a 	callr	r2
    4a08:	1000031e 	bne	r2,zero,4a18 <___vfprintf_internal_r+0x430>
    4a0c:	84000044 	addi	r16,r16,1
    4a10:	b82d883a 	mov	r22,r23
    4a14:	00002d06 	br	4acc <___vfprintf_internal_r+0x4e4>
    4a18:	00bfffc4 	movi	r2,-1
    4a1c:	00003106 	br	4ae4 <___vfprintf_internal_r+0x4fc>
    4a20:	b5c00017 	ldw	r23,0(r22)
    4a24:	b7000104 	addi	fp,r22,4
    4a28:	b809883a 	mov	r4,r23
    4a2c:	00045600 	call	4560 <strlen>
    4a30:	9091c83a 	sub	r8,r18,r2
    4a34:	102d883a 	mov	r22,r2
    4a38:	0200090e 	bge	zero,r8,4a60 <___vfprintf_internal_r+0x478>
    4a3c:	400f883a 	mov	r7,r8
    4a40:	01800804 	movi	r6,32
    4a44:	880b883a 	mov	r5,r17
    4a48:	a009883a 	mov	r4,r20
    4a4c:	da001015 	stw	r8,64(sp)
    4a50:	000457c0 	call	457c <print_repeat>
    4a54:	da001017 	ldw	r8,64(sp)
    4a58:	103fef1e 	bne	r2,zero,4a18 <_gp+0xffff6540>
    4a5c:	8221883a 	add	r16,r16,r8
    4a60:	88800117 	ldw	r2,4(r17)
    4a64:	b00f883a 	mov	r7,r22
    4a68:	b80d883a 	mov	r6,r23
    4a6c:	880b883a 	mov	r5,r17
    4a70:	a009883a 	mov	r4,r20
    4a74:	103ee83a 	callr	r2
    4a78:	103fe71e 	bne	r2,zero,4a18 <_gp+0xffff6540>
    4a7c:	85a1883a 	add	r16,r16,r22
    4a80:	e02d883a 	mov	r22,fp
    4a84:	00001106 	br	4acc <___vfprintf_internal_r+0x4e4>
    4a88:	00c00044 	movi	r3,1
    4a8c:	04ffffc4 	movi	r19,-1
    4a90:	d8000e15 	stw	zero,56(sp)
    4a94:	d8c00a15 	stw	r3,40(sp)
    4a98:	05400284 	movi	r21,10
    4a9c:	9825883a 	mov	r18,r19
    4aa0:	d8000c15 	stw	zero,48(sp)
    4aa4:	d8000b15 	stw	zero,44(sp)
    4aa8:	182f883a 	mov	r23,r3
    4aac:	00000806 	br	4ad0 <___vfprintf_internal_r+0x4e8>
    4ab0:	ddc00b15 	stw	r23,44(sp)
    4ab4:	05c00084 	movi	r23,2
    4ab8:	00000506 	br	4ad0 <___vfprintf_internal_r+0x4e8>
    4abc:	00c00044 	movi	r3,1
    4ac0:	d8c00c15 	stw	r3,48(sp)
    4ac4:	05c000c4 	movi	r23,3
    4ac8:	00000106 	br	4ad0 <___vfprintf_internal_r+0x4e8>
    4acc:	002f883a 	mov	r23,zero
    4ad0:	d8c00f17 	ldw	r3,60(sp)
    4ad4:	18c00044 	addi	r3,r3,1
    4ad8:	d8c00f15 	stw	r3,60(sp)
    4adc:	003edc06 	br	4650 <_gp+0xffff6178>
    4ae0:	8005883a 	mov	r2,r16
    4ae4:	dfc01a17 	ldw	ra,104(sp)
    4ae8:	df001917 	ldw	fp,100(sp)
    4aec:	ddc01817 	ldw	r23,96(sp)
    4af0:	dd801717 	ldw	r22,92(sp)
    4af4:	dd401617 	ldw	r21,88(sp)
    4af8:	dd001517 	ldw	r20,84(sp)
    4afc:	dcc01417 	ldw	r19,80(sp)
    4b00:	dc801317 	ldw	r18,76(sp)
    4b04:	dc401217 	ldw	r17,72(sp)
    4b08:	dc001117 	ldw	r16,68(sp)
    4b0c:	dec01b04 	addi	sp,sp,108
    4b10:	f800283a 	ret

00004b14 <__vfprintf_internal>:
    4b14:	00800034 	movhi	r2,0
    4b18:	10993904 	addi	r2,r2,25828
    4b1c:	300f883a 	mov	r7,r6
    4b20:	280d883a 	mov	r6,r5
    4b24:	200b883a 	mov	r5,r4
    4b28:	11000017 	ldw	r4,0(r2)
    4b2c:	00045e81 	jmpi	45e8 <___vfprintf_internal_r>

00004b30 <__sfvwrite_small_dev>:
    4b30:	2880000b 	ldhu	r2,0(r5)
    4b34:	1080020c 	andi	r2,r2,8
    4b38:	10002126 	beq	r2,zero,4bc0 <__sfvwrite_small_dev+0x90>
    4b3c:	2880008f 	ldh	r2,2(r5)
    4b40:	defffa04 	addi	sp,sp,-24
    4b44:	dc000015 	stw	r16,0(sp)
    4b48:	dfc00515 	stw	ra,20(sp)
    4b4c:	dd000415 	stw	r20,16(sp)
    4b50:	dcc00315 	stw	r19,12(sp)
    4b54:	dc800215 	stw	r18,8(sp)
    4b58:	dc400115 	stw	r17,4(sp)
    4b5c:	2821883a 	mov	r16,r5
    4b60:	10001216 	blt	r2,zero,4bac <__sfvwrite_small_dev+0x7c>
    4b64:	2027883a 	mov	r19,r4
    4b68:	3025883a 	mov	r18,r6
    4b6c:	3823883a 	mov	r17,r7
    4b70:	05010004 	movi	r20,1024
    4b74:	04400b0e 	bge	zero,r17,4ba4 <__sfvwrite_small_dev+0x74>
    4b78:	880f883a 	mov	r7,r17
    4b7c:	a440010e 	bge	r20,r17,4b84 <__sfvwrite_small_dev+0x54>
    4b80:	01c10004 	movi	r7,1024
    4b84:	8140008f 	ldh	r5,2(r16)
    4b88:	900d883a 	mov	r6,r18
    4b8c:	9809883a 	mov	r4,r19
    4b90:	0004be80 	call	4be8 <_write_r>
    4b94:	0080050e 	bge	zero,r2,4bac <__sfvwrite_small_dev+0x7c>
    4b98:	88a3c83a 	sub	r17,r17,r2
    4b9c:	90a5883a 	add	r18,r18,r2
    4ba0:	003ff406 	br	4b74 <_gp+0xffff669c>
    4ba4:	0005883a 	mov	r2,zero
    4ba8:	00000706 	br	4bc8 <__sfvwrite_small_dev+0x98>
    4bac:	8080000b 	ldhu	r2,0(r16)
    4bb0:	10801014 	ori	r2,r2,64
    4bb4:	8080000d 	sth	r2,0(r16)
    4bb8:	00bfffc4 	movi	r2,-1
    4bbc:	00000206 	br	4bc8 <__sfvwrite_small_dev+0x98>
    4bc0:	00bfffc4 	movi	r2,-1
    4bc4:	f800283a 	ret
    4bc8:	dfc00517 	ldw	ra,20(sp)
    4bcc:	dd000417 	ldw	r20,16(sp)
    4bd0:	dcc00317 	ldw	r19,12(sp)
    4bd4:	dc800217 	ldw	r18,8(sp)
    4bd8:	dc400117 	ldw	r17,4(sp)
    4bdc:	dc000017 	ldw	r16,0(sp)
    4be0:	dec00604 	addi	sp,sp,24
    4be4:	f800283a 	ret

00004be8 <_write_r>:
    4be8:	defffd04 	addi	sp,sp,-12
    4bec:	dc000015 	stw	r16,0(sp)
    4bf0:	04000034 	movhi	r16,0
    4bf4:	dc400115 	stw	r17,4(sp)
    4bf8:	8419f804 	addi	r16,r16,26592
    4bfc:	2023883a 	mov	r17,r4
    4c00:	2809883a 	mov	r4,r5
    4c04:	300b883a 	mov	r5,r6
    4c08:	380d883a 	mov	r6,r7
    4c0c:	dfc00215 	stw	ra,8(sp)
    4c10:	80000015 	stw	zero,0(r16)
    4c14:	0004fc00 	call	4fc0 <write>
    4c18:	00ffffc4 	movi	r3,-1
    4c1c:	10c0031e 	bne	r2,r3,4c2c <_write_r+0x44>
    4c20:	80c00017 	ldw	r3,0(r16)
    4c24:	18000126 	beq	r3,zero,4c2c <_write_r+0x44>
    4c28:	88c00015 	stw	r3,0(r17)
    4c2c:	dfc00217 	ldw	ra,8(sp)
    4c30:	dc400117 	ldw	r17,4(sp)
    4c34:	dc000017 	ldw	r16,0(sp)
    4c38:	dec00304 	addi	sp,sp,12
    4c3c:	f800283a 	ret

00004c40 <__divsi3>:
    4c40:	20001b16 	blt	r4,zero,4cb0 <__divsi3+0x70>
    4c44:	000f883a 	mov	r7,zero
    4c48:	28001616 	blt	r5,zero,4ca4 <__divsi3+0x64>
    4c4c:	200d883a 	mov	r6,r4
    4c50:	29001a2e 	bgeu	r5,r4,4cbc <__divsi3+0x7c>
    4c54:	00800804 	movi	r2,32
    4c58:	00c00044 	movi	r3,1
    4c5c:	00000106 	br	4c64 <__divsi3+0x24>
    4c60:	10000d26 	beq	r2,zero,4c98 <__divsi3+0x58>
    4c64:	294b883a 	add	r5,r5,r5
    4c68:	10bfffc4 	addi	r2,r2,-1
    4c6c:	18c7883a 	add	r3,r3,r3
    4c70:	293ffb36 	bltu	r5,r4,4c60 <_gp+0xffff6788>
    4c74:	0005883a 	mov	r2,zero
    4c78:	18000726 	beq	r3,zero,4c98 <__divsi3+0x58>
    4c7c:	0005883a 	mov	r2,zero
    4c80:	31400236 	bltu	r6,r5,4c8c <__divsi3+0x4c>
    4c84:	314dc83a 	sub	r6,r6,r5
    4c88:	10c4b03a 	or	r2,r2,r3
    4c8c:	1806d07a 	srli	r3,r3,1
    4c90:	280ad07a 	srli	r5,r5,1
    4c94:	183ffa1e 	bne	r3,zero,4c80 <_gp+0xffff67a8>
    4c98:	38000126 	beq	r7,zero,4ca0 <__divsi3+0x60>
    4c9c:	0085c83a 	sub	r2,zero,r2
    4ca0:	f800283a 	ret
    4ca4:	014bc83a 	sub	r5,zero,r5
    4ca8:	39c0005c 	xori	r7,r7,1
    4cac:	003fe706 	br	4c4c <_gp+0xffff6774>
    4cb0:	0109c83a 	sub	r4,zero,r4
    4cb4:	01c00044 	movi	r7,1
    4cb8:	003fe306 	br	4c48 <_gp+0xffff6770>
    4cbc:	00c00044 	movi	r3,1
    4cc0:	003fee06 	br	4c7c <_gp+0xffff67a4>

00004cc4 <__modsi3>:
    4cc4:	20001716 	blt	r4,zero,4d24 <__modsi3+0x60>
    4cc8:	000f883a 	mov	r7,zero
    4ccc:	2005883a 	mov	r2,r4
    4cd0:	28001216 	blt	r5,zero,4d1c <__modsi3+0x58>
    4cd4:	2900162e 	bgeu	r5,r4,4d30 <__modsi3+0x6c>
    4cd8:	01800804 	movi	r6,32
    4cdc:	00c00044 	movi	r3,1
    4ce0:	00000106 	br	4ce8 <__modsi3+0x24>
    4ce4:	30000a26 	beq	r6,zero,4d10 <__modsi3+0x4c>
    4ce8:	294b883a 	add	r5,r5,r5
    4cec:	31bfffc4 	addi	r6,r6,-1
    4cf0:	18c7883a 	add	r3,r3,r3
    4cf4:	293ffb36 	bltu	r5,r4,4ce4 <_gp+0xffff680c>
    4cf8:	18000526 	beq	r3,zero,4d10 <__modsi3+0x4c>
    4cfc:	1806d07a 	srli	r3,r3,1
    4d00:	11400136 	bltu	r2,r5,4d08 <__modsi3+0x44>
    4d04:	1145c83a 	sub	r2,r2,r5
    4d08:	280ad07a 	srli	r5,r5,1
    4d0c:	183ffb1e 	bne	r3,zero,4cfc <_gp+0xffff6824>
    4d10:	38000126 	beq	r7,zero,4d18 <__modsi3+0x54>
    4d14:	0085c83a 	sub	r2,zero,r2
    4d18:	f800283a 	ret
    4d1c:	014bc83a 	sub	r5,zero,r5
    4d20:	003fec06 	br	4cd4 <_gp+0xffff67fc>
    4d24:	0109c83a 	sub	r4,zero,r4
    4d28:	01c00044 	movi	r7,1
    4d2c:	003fe706 	br	4ccc <_gp+0xffff67f4>
    4d30:	00c00044 	movi	r3,1
    4d34:	003ff106 	br	4cfc <_gp+0xffff6824>

00004d38 <__udivsi3>:
    4d38:	200d883a 	mov	r6,r4
    4d3c:	2900152e 	bgeu	r5,r4,4d94 <__udivsi3+0x5c>
    4d40:	28001416 	blt	r5,zero,4d94 <__udivsi3+0x5c>
    4d44:	00800804 	movi	r2,32
    4d48:	00c00044 	movi	r3,1
    4d4c:	00000206 	br	4d58 <__udivsi3+0x20>
    4d50:	10000e26 	beq	r2,zero,4d8c <__udivsi3+0x54>
    4d54:	28000516 	blt	r5,zero,4d6c <__udivsi3+0x34>
    4d58:	294b883a 	add	r5,r5,r5
    4d5c:	10bfffc4 	addi	r2,r2,-1
    4d60:	18c7883a 	add	r3,r3,r3
    4d64:	293ffa36 	bltu	r5,r4,4d50 <_gp+0xffff6878>
    4d68:	18000826 	beq	r3,zero,4d8c <__udivsi3+0x54>
    4d6c:	0005883a 	mov	r2,zero
    4d70:	31400236 	bltu	r6,r5,4d7c <__udivsi3+0x44>
    4d74:	314dc83a 	sub	r6,r6,r5
    4d78:	10c4b03a 	or	r2,r2,r3
    4d7c:	1806d07a 	srli	r3,r3,1
    4d80:	280ad07a 	srli	r5,r5,1
    4d84:	183ffa1e 	bne	r3,zero,4d70 <_gp+0xffff6898>
    4d88:	f800283a 	ret
    4d8c:	0005883a 	mov	r2,zero
    4d90:	f800283a 	ret
    4d94:	00c00044 	movi	r3,1
    4d98:	003ff406 	br	4d6c <_gp+0xffff6894>

00004d9c <__umodsi3>:
    4d9c:	2005883a 	mov	r2,r4
    4da0:	2900122e 	bgeu	r5,r4,4dec <__umodsi3+0x50>
    4da4:	28001116 	blt	r5,zero,4dec <__umodsi3+0x50>
    4da8:	01800804 	movi	r6,32
    4dac:	00c00044 	movi	r3,1
    4db0:	00000206 	br	4dbc <__umodsi3+0x20>
    4db4:	30000c26 	beq	r6,zero,4de8 <__umodsi3+0x4c>
    4db8:	28000516 	blt	r5,zero,4dd0 <__umodsi3+0x34>
    4dbc:	294b883a 	add	r5,r5,r5
    4dc0:	31bfffc4 	addi	r6,r6,-1
    4dc4:	18c7883a 	add	r3,r3,r3
    4dc8:	293ffa36 	bltu	r5,r4,4db4 <_gp+0xffff68dc>
    4dcc:	18000626 	beq	r3,zero,4de8 <__umodsi3+0x4c>
    4dd0:	1806d07a 	srli	r3,r3,1
    4dd4:	11400136 	bltu	r2,r5,4ddc <__umodsi3+0x40>
    4dd8:	1145c83a 	sub	r2,r2,r5
    4ddc:	280ad07a 	srli	r5,r5,1
    4de0:	183ffb1e 	bne	r3,zero,4dd0 <_gp+0xffff68f8>
    4de4:	f800283a 	ret
    4de8:	f800283a 	ret
    4dec:	00c00044 	movi	r3,1
    4df0:	003ff706 	br	4dd0 <_gp+0xffff68f8>

00004df4 <__mulsi3>:
    4df4:	0005883a 	mov	r2,zero
    4df8:	20000726 	beq	r4,zero,4e18 <__mulsi3+0x24>
    4dfc:	20c0004c 	andi	r3,r4,1
    4e00:	2008d07a 	srli	r4,r4,1
    4e04:	18000126 	beq	r3,zero,4e0c <__mulsi3+0x18>
    4e08:	1145883a 	add	r2,r2,r5
    4e0c:	294b883a 	add	r5,r5,r5
    4e10:	203ffa1e 	bne	r4,zero,4dfc <_gp+0xffff6924>
    4e14:	f800283a 	ret
    4e18:	f800283a 	ret

00004e1c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4e1c:	defffc04 	addi	sp,sp,-16
    4e20:	df000315 	stw	fp,12(sp)
    4e24:	df000304 	addi	fp,sp,12
    4e28:	e13ffd15 	stw	r4,-12(fp)
    4e2c:	e17ffe15 	stw	r5,-8(fp)
    4e30:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4e34:	e0fffe17 	ldw	r3,-8(fp)
    4e38:	e0bffd17 	ldw	r2,-12(fp)
    4e3c:	18800c26 	beq	r3,r2,4e70 <alt_load_section+0x54>
  {
    while( to != end )
    4e40:	00000806 	br	4e64 <alt_load_section+0x48>
    {
      *to++ = *from++;
    4e44:	e0bffe17 	ldw	r2,-8(fp)
    4e48:	10c00104 	addi	r3,r2,4
    4e4c:	e0fffe15 	stw	r3,-8(fp)
    4e50:	e0fffd17 	ldw	r3,-12(fp)
    4e54:	19000104 	addi	r4,r3,4
    4e58:	e13ffd15 	stw	r4,-12(fp)
    4e5c:	18c00017 	ldw	r3,0(r3)
    4e60:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4e64:	e0fffe17 	ldw	r3,-8(fp)
    4e68:	e0bfff17 	ldw	r2,-4(fp)
    4e6c:	18bff51e 	bne	r3,r2,4e44 <_gp+0xffff696c>
    {
      *to++ = *from++;
    }
  }
}
    4e70:	0001883a 	nop
    4e74:	e037883a 	mov	sp,fp
    4e78:	df000017 	ldw	fp,0(sp)
    4e7c:	dec00104 	addi	sp,sp,4
    4e80:	f800283a 	ret

00004e84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4e84:	defffe04 	addi	sp,sp,-8
    4e88:	dfc00115 	stw	ra,4(sp)
    4e8c:	df000015 	stw	fp,0(sp)
    4e90:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4e94:	01800034 	movhi	r6,0
    4e98:	31994004 	addi	r6,r6,25856
    4e9c:	01400034 	movhi	r5,0
    4ea0:	29588904 	addi	r5,r5,25124
    4ea4:	01000034 	movhi	r4,0
    4ea8:	21194004 	addi	r4,r4,25856
    4eac:	0004e1c0 	call	4e1c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4eb0:	01800034 	movhi	r6,0
    4eb4:	31900804 	addi	r6,r6,16416
    4eb8:	01400034 	movhi	r5,0
    4ebc:	29500804 	addi	r5,r5,16416
    4ec0:	01000034 	movhi	r4,0
    4ec4:	21100804 	addi	r4,r4,16416
    4ec8:	0004e1c0 	call	4e1c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4ecc:	01800034 	movhi	r6,0
    4ed0:	31988904 	addi	r6,r6,25124
    4ed4:	01400034 	movhi	r5,0
    4ed8:	29584b04 	addi	r5,r5,24876
    4edc:	01000034 	movhi	r4,0
    4ee0:	21184b04 	addi	r4,r4,24876
    4ee4:	0004e1c0 	call	4e1c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4ee8:	00054b80 	call	54b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    4eec:	00056a40 	call	56a4 <alt_icache_flush_all>
}
    4ef0:	0001883a 	nop
    4ef4:	e037883a 	mov	sp,fp
    4ef8:	dfc00117 	ldw	ra,4(sp)
    4efc:	df000017 	ldw	fp,0(sp)
    4f00:	dec00204 	addi	sp,sp,8
    4f04:	f800283a 	ret

00004f08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4f08:	defffd04 	addi	sp,sp,-12
    4f0c:	dfc00215 	stw	ra,8(sp)
    4f10:	df000115 	stw	fp,4(sp)
    4f14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4f18:	0009883a 	mov	r4,zero
    4f1c:	00050f40 	call	50f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    4f20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4f24:	000512c0 	call	512c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4f28:	01800034 	movhi	r6,0
    4f2c:	31987c04 	addi	r6,r6,25072
    4f30:	01400034 	movhi	r5,0
    4f34:	29587c04 	addi	r5,r5,25072
    4f38:	01000034 	movhi	r4,0
    4f3c:	21187c04 	addi	r4,r4,25072
    4f40:	00057a80 	call	57a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4f44:	00055e40 	call	55e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4f48:	01000034 	movhi	r4,0
    4f4c:	21159104 	addi	r4,r4,22084
    4f50:	0005dac0 	call	5dac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4f54:	d0a0c317 	ldw	r2,-31988(gp)
    4f58:	d0e0c417 	ldw	r3,-31984(gp)
    4f5c:	d120c517 	ldw	r4,-31980(gp)
    4f60:	200d883a 	mov	r6,r4
    4f64:	180b883a 	mov	r5,r3
    4f68:	1009883a 	mov	r4,r2
    4f6c:	000405c0 	call	405c <main>
    4f70:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    4f74:	01000044 	movi	r4,1
    4f78:	00053e00 	call	53e0 <close>
  exit (result);
    4f7c:	e13fff17 	ldw	r4,-4(fp)
    4f80:	0005dc00 	call	5dc0 <exit>

00004f84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4f84:	defffe04 	addi	sp,sp,-8
    4f88:	dfc00115 	stw	ra,4(sp)
    4f8c:	df000015 	stw	fp,0(sp)
    4f90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4f94:	d0a00917 	ldw	r2,-32732(gp)
    4f98:	10000326 	beq	r2,zero,4fa8 <alt_get_errno+0x24>
    4f9c:	d0a00917 	ldw	r2,-32732(gp)
    4fa0:	103ee83a 	callr	r2
    4fa4:	00000106 	br	4fac <alt_get_errno+0x28>
    4fa8:	d0a0c204 	addi	r2,gp,-31992
}
    4fac:	e037883a 	mov	sp,fp
    4fb0:	dfc00117 	ldw	ra,4(sp)
    4fb4:	df000017 	ldw	fp,0(sp)
    4fb8:	dec00204 	addi	sp,sp,8
    4fbc:	f800283a 	ret

00004fc0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4fc0:	defff904 	addi	sp,sp,-28
    4fc4:	dfc00615 	stw	ra,24(sp)
    4fc8:	df000515 	stw	fp,20(sp)
    4fcc:	df000504 	addi	fp,sp,20
    4fd0:	e13ffd15 	stw	r4,-12(fp)
    4fd4:	e17ffe15 	stw	r5,-8(fp)
    4fd8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4fdc:	e0bffd17 	ldw	r2,-12(fp)
    4fe0:	10000816 	blt	r2,zero,5004 <write+0x44>
    4fe4:	01400304 	movi	r5,12
    4fe8:	e13ffd17 	ldw	r4,-12(fp)
    4fec:	0004df40 	call	4df4 <__mulsi3>
    4ff0:	1007883a 	mov	r3,r2
    4ff4:	00800034 	movhi	r2,0
    4ff8:	1098d604 	addi	r2,r2,25432
    4ffc:	1885883a 	add	r2,r3,r2
    5000:	00000106 	br	5008 <write+0x48>
    5004:	0005883a 	mov	r2,zero
    5008:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    500c:	e0bffb17 	ldw	r2,-20(fp)
    5010:	10002126 	beq	r2,zero,5098 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5014:	e0bffb17 	ldw	r2,-20(fp)
    5018:	10800217 	ldw	r2,8(r2)
    501c:	108000cc 	andi	r2,r2,3
    5020:	10001826 	beq	r2,zero,5084 <write+0xc4>
    5024:	e0bffb17 	ldw	r2,-20(fp)
    5028:	10800017 	ldw	r2,0(r2)
    502c:	10800617 	ldw	r2,24(r2)
    5030:	10001426 	beq	r2,zero,5084 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5034:	e0bffb17 	ldw	r2,-20(fp)
    5038:	10800017 	ldw	r2,0(r2)
    503c:	10800617 	ldw	r2,24(r2)
    5040:	e0ffff17 	ldw	r3,-4(fp)
    5044:	180d883a 	mov	r6,r3
    5048:	e17ffe17 	ldw	r5,-8(fp)
    504c:	e13ffb17 	ldw	r4,-20(fp)
    5050:	103ee83a 	callr	r2
    5054:	e0bffc15 	stw	r2,-16(fp)
    5058:	e0bffc17 	ldw	r2,-16(fp)
    505c:	1000070e 	bge	r2,zero,507c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    5060:	0004f840 	call	4f84 <alt_get_errno>
    5064:	1007883a 	mov	r3,r2
    5068:	e0bffc17 	ldw	r2,-16(fp)
    506c:	0085c83a 	sub	r2,zero,r2
    5070:	18800015 	stw	r2,0(r3)
        return -1;
    5074:	00bfffc4 	movi	r2,-1
    5078:	00000c06 	br	50ac <write+0xec>
      }
      return rval;
    507c:	e0bffc17 	ldw	r2,-16(fp)
    5080:	00000a06 	br	50ac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5084:	0004f840 	call	4f84 <alt_get_errno>
    5088:	1007883a 	mov	r3,r2
    508c:	00800344 	movi	r2,13
    5090:	18800015 	stw	r2,0(r3)
    5094:	00000406 	br	50a8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5098:	0004f840 	call	4f84 <alt_get_errno>
    509c:	1007883a 	mov	r3,r2
    50a0:	00801444 	movi	r2,81
    50a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    50a8:	00bfffc4 	movi	r2,-1
}
    50ac:	e037883a 	mov	sp,fp
    50b0:	dfc00117 	ldw	ra,4(sp)
    50b4:	df000017 	ldw	fp,0(sp)
    50b8:	dec00204 	addi	sp,sp,8
    50bc:	f800283a 	ret

000050c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    50c0:	defffd04 	addi	sp,sp,-12
    50c4:	dfc00215 	stw	ra,8(sp)
    50c8:	df000115 	stw	fp,4(sp)
    50cc:	df000104 	addi	fp,sp,4
    50d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    50d4:	d1600604 	addi	r5,gp,-32744
    50d8:	e13fff17 	ldw	r4,-4(fp)
    50dc:	00055400 	call	5540 <alt_dev_llist_insert>
}
    50e0:	e037883a 	mov	sp,fp
    50e4:	dfc00117 	ldw	ra,4(sp)
    50e8:	df000017 	ldw	fp,0(sp)
    50ec:	dec00204 	addi	sp,sp,8
    50f0:	f800283a 	ret

000050f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    50f4:	defffd04 	addi	sp,sp,-12
    50f8:	dfc00215 	stw	ra,8(sp)
    50fc:	df000115 	stw	fp,4(sp)
    5100:	df000104 	addi	fp,sp,4
    5104:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    5108:	0005b2c0 	call	5b2c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    510c:	00800044 	movi	r2,1
    5110:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5114:	0001883a 	nop
    5118:	e037883a 	mov	sp,fp
    511c:	dfc00117 	ldw	ra,4(sp)
    5120:	df000017 	ldw	fp,0(sp)
    5124:	dec00204 	addi	sp,sp,8
    5128:	f800283a 	ret

0000512c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    512c:	defffe04 	addi	sp,sp,-8
    5130:	dfc00115 	stw	ra,4(sp)
    5134:	df000015 	stw	fp,0(sp)
    5138:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    513c:	01000034 	movhi	r4,0
    5140:	2118c104 	addi	r4,r4,25348
    5144:	00050c00 	call	50c0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    5148:	0001883a 	nop
}
    514c:	0001883a 	nop
    5150:	e037883a 	mov	sp,fp
    5154:	dfc00117 	ldw	ra,4(sp)
    5158:	df000017 	ldw	fp,0(sp)
    515c:	dec00204 	addi	sp,sp,8
    5160:	f800283a 	ret

00005164 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    5164:	defffa04 	addi	sp,sp,-24
    5168:	dfc00515 	stw	ra,20(sp)
    516c:	df000415 	stw	fp,16(sp)
    5170:	df000404 	addi	fp,sp,16
    5174:	e13ffd15 	stw	r4,-12(fp)
    5178:	e17ffe15 	stw	r5,-8(fp)
    517c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5180:	e0bffd17 	ldw	r2,-12(fp)
    5184:	10800017 	ldw	r2,0(r2)
    5188:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    518c:	e0bffc17 	ldw	r2,-16(fp)
    5190:	10c00a04 	addi	r3,r2,40
    5194:	e0bffd17 	ldw	r2,-12(fp)
    5198:	10800217 	ldw	r2,8(r2)
    519c:	100f883a 	mov	r7,r2
    51a0:	e1bfff17 	ldw	r6,-4(fp)
    51a4:	e17ffe17 	ldw	r5,-8(fp)
    51a8:	1809883a 	mov	r4,r3
    51ac:	00052240 	call	5224 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    51b0:	e037883a 	mov	sp,fp
    51b4:	dfc00117 	ldw	ra,4(sp)
    51b8:	df000017 	ldw	fp,0(sp)
    51bc:	dec00204 	addi	sp,sp,8
    51c0:	f800283a 	ret

000051c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    51c4:	defffa04 	addi	sp,sp,-24
    51c8:	dfc00515 	stw	ra,20(sp)
    51cc:	df000415 	stw	fp,16(sp)
    51d0:	df000404 	addi	fp,sp,16
    51d4:	e13ffd15 	stw	r4,-12(fp)
    51d8:	e17ffe15 	stw	r5,-8(fp)
    51dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    51e0:	e0bffd17 	ldw	r2,-12(fp)
    51e4:	10800017 	ldw	r2,0(r2)
    51e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    51ec:	e0bffc17 	ldw	r2,-16(fp)
    51f0:	10c00a04 	addi	r3,r2,40
    51f4:	e0bffd17 	ldw	r2,-12(fp)
    51f8:	10800217 	ldw	r2,8(r2)
    51fc:	100f883a 	mov	r7,r2
    5200:	e1bfff17 	ldw	r6,-4(fp)
    5204:	e17ffe17 	ldw	r5,-8(fp)
    5208:	1809883a 	mov	r4,r3
    520c:	00053100 	call	5310 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    5210:	e037883a 	mov	sp,fp
    5214:	dfc00117 	ldw	ra,4(sp)
    5218:	df000017 	ldw	fp,0(sp)
    521c:	dec00204 	addi	sp,sp,8
    5220:	f800283a 	ret

00005224 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    5224:	defff704 	addi	sp,sp,-36
    5228:	df000815 	stw	fp,32(sp)
    522c:	df000804 	addi	fp,sp,32
    5230:	e13ffc15 	stw	r4,-16(fp)
    5234:	e17ffd15 	stw	r5,-12(fp)
    5238:	e1bffe15 	stw	r6,-8(fp)
    523c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    5240:	e0bffc17 	ldw	r2,-16(fp)
    5244:	10800017 	ldw	r2,0(r2)
    5248:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    524c:	e0bffd17 	ldw	r2,-12(fp)
    5250:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    5254:	e0bffe17 	ldw	r2,-8(fp)
    5258:	e0fffd17 	ldw	r3,-12(fp)
    525c:	1885883a 	add	r2,r3,r2
    5260:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    5264:	00001206 	br	52b0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    5268:	e0bff917 	ldw	r2,-28(fp)
    526c:	10800037 	ldwio	r2,0(r2)
    5270:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    5274:	e0bffb17 	ldw	r2,-20(fp)
    5278:	10a0000c 	andi	r2,r2,32768
    527c:	10000626 	beq	r2,zero,5298 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5280:	e0bff817 	ldw	r2,-32(fp)
    5284:	10c00044 	addi	r3,r2,1
    5288:	e0fff815 	stw	r3,-32(fp)
    528c:	e0fffb17 	ldw	r3,-20(fp)
    5290:	10c00005 	stb	r3,0(r2)
    5294:	00000606 	br	52b0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    5298:	e0fff817 	ldw	r3,-32(fp)
    529c:	e0bffd17 	ldw	r2,-12(fp)
    52a0:	1880071e 	bne	r3,r2,52c0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    52a4:	e0bfff17 	ldw	r2,-4(fp)
    52a8:	1090000c 	andi	r2,r2,16384
    52ac:	1000061e 	bne	r2,zero,52c8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    52b0:	e0fff817 	ldw	r3,-32(fp)
    52b4:	e0bffa17 	ldw	r2,-24(fp)
    52b8:	18bfeb36 	bltu	r3,r2,5268 <_gp+0xffff6d90>
    52bc:	00000306 	br	52cc <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    52c0:	0001883a 	nop
    52c4:	00000106 	br	52cc <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    52c8:	0001883a 	nop
    
  }

  if (ptr != buffer)
    52cc:	e0fff817 	ldw	r3,-32(fp)
    52d0:	e0bffd17 	ldw	r2,-12(fp)
    52d4:	18800426 	beq	r3,r2,52e8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    52d8:	e0fff817 	ldw	r3,-32(fp)
    52dc:	e0bffd17 	ldw	r2,-12(fp)
    52e0:	1885c83a 	sub	r2,r3,r2
    52e4:	00000606 	br	5300 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    52e8:	e0bfff17 	ldw	r2,-4(fp)
    52ec:	1090000c 	andi	r2,r2,16384
    52f0:	10000226 	beq	r2,zero,52fc <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    52f4:	00bffd44 	movi	r2,-11
    52f8:	00000106 	br	5300 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    52fc:	00bffec4 	movi	r2,-5
}
    5300:	e037883a 	mov	sp,fp
    5304:	df000017 	ldw	fp,0(sp)
    5308:	dec00104 	addi	sp,sp,4
    530c:	f800283a 	ret

00005310 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5310:	defff904 	addi	sp,sp,-28
    5314:	df000615 	stw	fp,24(sp)
    5318:	df000604 	addi	fp,sp,24
    531c:	e13ffc15 	stw	r4,-16(fp)
    5320:	e17ffd15 	stw	r5,-12(fp)
    5324:	e1bffe15 	stw	r6,-8(fp)
    5328:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    532c:	e0bffc17 	ldw	r2,-16(fp)
    5330:	10800017 	ldw	r2,0(r2)
    5334:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    5338:	e0bffe17 	ldw	r2,-8(fp)
    533c:	e0fffd17 	ldw	r3,-12(fp)
    5340:	1885883a 	add	r2,r3,r2
    5344:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    5348:	00000e06 	br	5384 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    534c:	e0bffa17 	ldw	r2,-24(fp)
    5350:	10800104 	addi	r2,r2,4
    5354:	10800037 	ldwio	r2,0(r2)
    5358:	10bfffec 	andhi	r2,r2,65535
    535c:	10000926 	beq	r2,zero,5384 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    5360:	e0fffa17 	ldw	r3,-24(fp)
    5364:	e0bffd17 	ldw	r2,-12(fp)
    5368:	11000044 	addi	r4,r2,1
    536c:	e13ffd15 	stw	r4,-12(fp)
    5370:	10800003 	ldbu	r2,0(r2)
    5374:	10803fcc 	andi	r2,r2,255
    5378:	1080201c 	xori	r2,r2,128
    537c:	10bfe004 	addi	r2,r2,-128
    5380:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5384:	e0fffd17 	ldw	r3,-12(fp)
    5388:	e0bffb17 	ldw	r2,-20(fp)
    538c:	18bfef36 	bltu	r3,r2,534c <_gp+0xffff6e74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    5390:	e0bffe17 	ldw	r2,-8(fp)
}
    5394:	e037883a 	mov	sp,fp
    5398:	df000017 	ldw	fp,0(sp)
    539c:	dec00104 	addi	sp,sp,4
    53a0:	f800283a 	ret

000053a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    53a4:	defffe04 	addi	sp,sp,-8
    53a8:	dfc00115 	stw	ra,4(sp)
    53ac:	df000015 	stw	fp,0(sp)
    53b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    53b4:	d0a00917 	ldw	r2,-32732(gp)
    53b8:	10000326 	beq	r2,zero,53c8 <alt_get_errno+0x24>
    53bc:	d0a00917 	ldw	r2,-32732(gp)
    53c0:	103ee83a 	callr	r2
    53c4:	00000106 	br	53cc <alt_get_errno+0x28>
    53c8:	d0a0c204 	addi	r2,gp,-31992
}
    53cc:	e037883a 	mov	sp,fp
    53d0:	dfc00117 	ldw	ra,4(sp)
    53d4:	df000017 	ldw	fp,0(sp)
    53d8:	dec00204 	addi	sp,sp,8
    53dc:	f800283a 	ret

000053e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    53e0:	defffb04 	addi	sp,sp,-20
    53e4:	dfc00415 	stw	ra,16(sp)
    53e8:	df000315 	stw	fp,12(sp)
    53ec:	df000304 	addi	fp,sp,12
    53f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    53f4:	e0bfff17 	ldw	r2,-4(fp)
    53f8:	10000816 	blt	r2,zero,541c <close+0x3c>
    53fc:	01400304 	movi	r5,12
    5400:	e13fff17 	ldw	r4,-4(fp)
    5404:	0004df40 	call	4df4 <__mulsi3>
    5408:	1007883a 	mov	r3,r2
    540c:	00800034 	movhi	r2,0
    5410:	1098d604 	addi	r2,r2,25432
    5414:	1885883a 	add	r2,r3,r2
    5418:	00000106 	br	5420 <close+0x40>
    541c:	0005883a 	mov	r2,zero
    5420:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    5424:	e0bffd17 	ldw	r2,-12(fp)
    5428:	10001926 	beq	r2,zero,5490 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    542c:	e0bffd17 	ldw	r2,-12(fp)
    5430:	10800017 	ldw	r2,0(r2)
    5434:	10800417 	ldw	r2,16(r2)
    5438:	10000626 	beq	r2,zero,5454 <close+0x74>
    543c:	e0bffd17 	ldw	r2,-12(fp)
    5440:	10800017 	ldw	r2,0(r2)
    5444:	10800417 	ldw	r2,16(r2)
    5448:	e13ffd17 	ldw	r4,-12(fp)
    544c:	103ee83a 	callr	r2
    5450:	00000106 	br	5458 <close+0x78>
    5454:	0005883a 	mov	r2,zero
    5458:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    545c:	e13fff17 	ldw	r4,-4(fp)
    5460:	0005aa80 	call	5aa8 <alt_release_fd>
    if (rval < 0)
    5464:	e0bffe17 	ldw	r2,-8(fp)
    5468:	1000070e 	bge	r2,zero,5488 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    546c:	00053a40 	call	53a4 <alt_get_errno>
    5470:	1007883a 	mov	r3,r2
    5474:	e0bffe17 	ldw	r2,-8(fp)
    5478:	0085c83a 	sub	r2,zero,r2
    547c:	18800015 	stw	r2,0(r3)
      return -1;
    5480:	00bfffc4 	movi	r2,-1
    5484:	00000706 	br	54a4 <close+0xc4>
    }
    return 0;
    5488:	0005883a 	mov	r2,zero
    548c:	00000506 	br	54a4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5490:	00053a40 	call	53a4 <alt_get_errno>
    5494:	1007883a 	mov	r3,r2
    5498:	00801444 	movi	r2,81
    549c:	18800015 	stw	r2,0(r3)
    return -1;
    54a0:	00bfffc4 	movi	r2,-1
  }
}
    54a4:	e037883a 	mov	sp,fp
    54a8:	dfc00117 	ldw	ra,4(sp)
    54ac:	df000017 	ldw	fp,0(sp)
    54b0:	dec00204 	addi	sp,sp,8
    54b4:	f800283a 	ret

000054b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    54b8:	deffff04 	addi	sp,sp,-4
    54bc:	df000015 	stw	fp,0(sp)
    54c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    54c4:	0001883a 	nop
    54c8:	e037883a 	mov	sp,fp
    54cc:	df000017 	ldw	fp,0(sp)
    54d0:	dec00104 	addi	sp,sp,4
    54d4:	f800283a 	ret

000054d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    54d8:	defffc04 	addi	sp,sp,-16
    54dc:	df000315 	stw	fp,12(sp)
    54e0:	df000304 	addi	fp,sp,12
    54e4:	e13ffd15 	stw	r4,-12(fp)
    54e8:	e17ffe15 	stw	r5,-8(fp)
    54ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
    54f0:	e0bfff17 	ldw	r2,-4(fp)
}
    54f4:	e037883a 	mov	sp,fp
    54f8:	df000017 	ldw	fp,0(sp)
    54fc:	dec00104 	addi	sp,sp,4
    5500:	f800283a 	ret

00005504 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5504:	defffe04 	addi	sp,sp,-8
    5508:	dfc00115 	stw	ra,4(sp)
    550c:	df000015 	stw	fp,0(sp)
    5510:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5514:	d0a00917 	ldw	r2,-32732(gp)
    5518:	10000326 	beq	r2,zero,5528 <alt_get_errno+0x24>
    551c:	d0a00917 	ldw	r2,-32732(gp)
    5520:	103ee83a 	callr	r2
    5524:	00000106 	br	552c <alt_get_errno+0x28>
    5528:	d0a0c204 	addi	r2,gp,-31992
}
    552c:	e037883a 	mov	sp,fp
    5530:	dfc00117 	ldw	ra,4(sp)
    5534:	df000017 	ldw	fp,0(sp)
    5538:	dec00204 	addi	sp,sp,8
    553c:	f800283a 	ret

00005540 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5540:	defffa04 	addi	sp,sp,-24
    5544:	dfc00515 	stw	ra,20(sp)
    5548:	df000415 	stw	fp,16(sp)
    554c:	df000404 	addi	fp,sp,16
    5550:	e13ffe15 	stw	r4,-8(fp)
    5554:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5558:	e0bffe17 	ldw	r2,-8(fp)
    555c:	10000326 	beq	r2,zero,556c <alt_dev_llist_insert+0x2c>
    5560:	e0bffe17 	ldw	r2,-8(fp)
    5564:	10800217 	ldw	r2,8(r2)
    5568:	1000061e 	bne	r2,zero,5584 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    556c:	00055040 	call	5504 <alt_get_errno>
    5570:	1007883a 	mov	r3,r2
    5574:	00800584 	movi	r2,22
    5578:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    557c:	00bffa84 	movi	r2,-22
    5580:	00001306 	br	55d0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5584:	e0bffe17 	ldw	r2,-8(fp)
    5588:	e0ffff17 	ldw	r3,-4(fp)
    558c:	e0fffc15 	stw	r3,-16(fp)
    5590:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5594:	e0bffd17 	ldw	r2,-12(fp)
    5598:	e0fffc17 	ldw	r3,-16(fp)
    559c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    55a0:	e0bffc17 	ldw	r2,-16(fp)
    55a4:	10c00017 	ldw	r3,0(r2)
    55a8:	e0bffd17 	ldw	r2,-12(fp)
    55ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    55b0:	e0bffc17 	ldw	r2,-16(fp)
    55b4:	10800017 	ldw	r2,0(r2)
    55b8:	e0fffd17 	ldw	r3,-12(fp)
    55bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    55c0:	e0bffc17 	ldw	r2,-16(fp)
    55c4:	e0fffd17 	ldw	r3,-12(fp)
    55c8:	10c00015 	stw	r3,0(r2)

  return 0;  
    55cc:	0005883a 	mov	r2,zero
}
    55d0:	e037883a 	mov	sp,fp
    55d4:	dfc00117 	ldw	ra,4(sp)
    55d8:	df000017 	ldw	fp,0(sp)
    55dc:	dec00204 	addi	sp,sp,8
    55e0:	f800283a 	ret

000055e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    55e4:	defffd04 	addi	sp,sp,-12
    55e8:	dfc00215 	stw	ra,8(sp)
    55ec:	df000115 	stw	fp,4(sp)
    55f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    55f4:	00800034 	movhi	r2,0
    55f8:	10984a04 	addi	r2,r2,24872
    55fc:	e0bfff15 	stw	r2,-4(fp)
    5600:	00000606 	br	561c <_do_ctors+0x38>
        (*ctor) (); 
    5604:	e0bfff17 	ldw	r2,-4(fp)
    5608:	10800017 	ldw	r2,0(r2)
    560c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5610:	e0bfff17 	ldw	r2,-4(fp)
    5614:	10bfff04 	addi	r2,r2,-4
    5618:	e0bfff15 	stw	r2,-4(fp)
    561c:	e0ffff17 	ldw	r3,-4(fp)
    5620:	00800034 	movhi	r2,0
    5624:	10984b04 	addi	r2,r2,24876
    5628:	18bff62e 	bgeu	r3,r2,5604 <_gp+0xffff712c>
        (*ctor) (); 
}
    562c:	0001883a 	nop
    5630:	e037883a 	mov	sp,fp
    5634:	dfc00117 	ldw	ra,4(sp)
    5638:	df000017 	ldw	fp,0(sp)
    563c:	dec00204 	addi	sp,sp,8
    5640:	f800283a 	ret

00005644 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    5644:	defffd04 	addi	sp,sp,-12
    5648:	dfc00215 	stw	ra,8(sp)
    564c:	df000115 	stw	fp,4(sp)
    5650:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5654:	00800034 	movhi	r2,0
    5658:	10984a04 	addi	r2,r2,24872
    565c:	e0bfff15 	stw	r2,-4(fp)
    5660:	00000606 	br	567c <_do_dtors+0x38>
        (*dtor) (); 
    5664:	e0bfff17 	ldw	r2,-4(fp)
    5668:	10800017 	ldw	r2,0(r2)
    566c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5670:	e0bfff17 	ldw	r2,-4(fp)
    5674:	10bfff04 	addi	r2,r2,-4
    5678:	e0bfff15 	stw	r2,-4(fp)
    567c:	e0ffff17 	ldw	r3,-4(fp)
    5680:	00800034 	movhi	r2,0
    5684:	10984b04 	addi	r2,r2,24876
    5688:	18bff62e 	bgeu	r3,r2,5664 <_gp+0xffff718c>
        (*dtor) (); 
}
    568c:	0001883a 	nop
    5690:	e037883a 	mov	sp,fp
    5694:	dfc00117 	ldw	ra,4(sp)
    5698:	df000017 	ldw	fp,0(sp)
    569c:	dec00204 	addi	sp,sp,8
    56a0:	f800283a 	ret

000056a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    56a4:	deffff04 	addi	sp,sp,-4
    56a8:	df000015 	stw	fp,0(sp)
    56ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    56b0:	0001883a 	nop
    56b4:	e037883a 	mov	sp,fp
    56b8:	df000017 	ldw	fp,0(sp)
    56bc:	dec00104 	addi	sp,sp,4
    56c0:	f800283a 	ret

000056c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    56c4:	defff804 	addi	sp,sp,-32
    56c8:	dfc00715 	stw	ra,28(sp)
    56cc:	df000615 	stw	fp,24(sp)
    56d0:	dc000515 	stw	r16,20(sp)
    56d4:	df000604 	addi	fp,sp,24
    56d8:	e13ffb15 	stw	r4,-20(fp)
    56dc:	e17ffc15 	stw	r5,-16(fp)
    56e0:	e1bffd15 	stw	r6,-12(fp)
    56e4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    56e8:	e1bffe17 	ldw	r6,-8(fp)
    56ec:	e17ffd17 	ldw	r5,-12(fp)
    56f0:	e13ffc17 	ldw	r4,-16(fp)
    56f4:	000594c0 	call	594c <open>
    56f8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    56fc:	e0bffa17 	ldw	r2,-24(fp)
    5700:	10002216 	blt	r2,zero,578c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    5704:	04000034 	movhi	r16,0
    5708:	8418d604 	addi	r16,r16,25432
    570c:	e0bffa17 	ldw	r2,-24(fp)
    5710:	01400304 	movi	r5,12
    5714:	1009883a 	mov	r4,r2
    5718:	0004df40 	call	4df4 <__mulsi3>
    571c:	8085883a 	add	r2,r16,r2
    5720:	10c00017 	ldw	r3,0(r2)
    5724:	e0bffb17 	ldw	r2,-20(fp)
    5728:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    572c:	04000034 	movhi	r16,0
    5730:	8418d604 	addi	r16,r16,25432
    5734:	e0bffa17 	ldw	r2,-24(fp)
    5738:	01400304 	movi	r5,12
    573c:	1009883a 	mov	r4,r2
    5740:	0004df40 	call	4df4 <__mulsi3>
    5744:	8085883a 	add	r2,r16,r2
    5748:	10800104 	addi	r2,r2,4
    574c:	10c00017 	ldw	r3,0(r2)
    5750:	e0bffb17 	ldw	r2,-20(fp)
    5754:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5758:	04000034 	movhi	r16,0
    575c:	8418d604 	addi	r16,r16,25432
    5760:	e0bffa17 	ldw	r2,-24(fp)
    5764:	01400304 	movi	r5,12
    5768:	1009883a 	mov	r4,r2
    576c:	0004df40 	call	4df4 <__mulsi3>
    5770:	8085883a 	add	r2,r16,r2
    5774:	10800204 	addi	r2,r2,8
    5778:	10c00017 	ldw	r3,0(r2)
    577c:	e0bffb17 	ldw	r2,-20(fp)
    5780:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5784:	e13ffa17 	ldw	r4,-24(fp)
    5788:	0005aa80 	call	5aa8 <alt_release_fd>
  }
} 
    578c:	0001883a 	nop
    5790:	e6ffff04 	addi	sp,fp,-4
    5794:	dfc00217 	ldw	ra,8(sp)
    5798:	df000117 	ldw	fp,4(sp)
    579c:	dc000017 	ldw	r16,0(sp)
    57a0:	dec00304 	addi	sp,sp,12
    57a4:	f800283a 	ret

000057a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    57a8:	defffb04 	addi	sp,sp,-20
    57ac:	dfc00415 	stw	ra,16(sp)
    57b0:	df000315 	stw	fp,12(sp)
    57b4:	df000304 	addi	fp,sp,12
    57b8:	e13ffd15 	stw	r4,-12(fp)
    57bc:	e17ffe15 	stw	r5,-8(fp)
    57c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    57c4:	01c07fc4 	movi	r7,511
    57c8:	01800044 	movi	r6,1
    57cc:	e17ffd17 	ldw	r5,-12(fp)
    57d0:	01000034 	movhi	r4,0
    57d4:	2118d904 	addi	r4,r4,25444
    57d8:	00056c40 	call	56c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    57dc:	01c07fc4 	movi	r7,511
    57e0:	000d883a 	mov	r6,zero
    57e4:	e17ffe17 	ldw	r5,-8(fp)
    57e8:	01000034 	movhi	r4,0
    57ec:	2118d604 	addi	r4,r4,25432
    57f0:	00056c40 	call	56c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    57f4:	01c07fc4 	movi	r7,511
    57f8:	01800044 	movi	r6,1
    57fc:	e17fff17 	ldw	r5,-4(fp)
    5800:	01000034 	movhi	r4,0
    5804:	2118dc04 	addi	r4,r4,25456
    5808:	00056c40 	call	56c4 <alt_open_fd>
}  
    580c:	0001883a 	nop
    5810:	e037883a 	mov	sp,fp
    5814:	dfc00117 	ldw	ra,4(sp)
    5818:	df000017 	ldw	fp,0(sp)
    581c:	dec00204 	addi	sp,sp,8
    5820:	f800283a 	ret

00005824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5824:	defffe04 	addi	sp,sp,-8
    5828:	dfc00115 	stw	ra,4(sp)
    582c:	df000015 	stw	fp,0(sp)
    5830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5834:	d0a00917 	ldw	r2,-32732(gp)
    5838:	10000326 	beq	r2,zero,5848 <alt_get_errno+0x24>
    583c:	d0a00917 	ldw	r2,-32732(gp)
    5840:	103ee83a 	callr	r2
    5844:	00000106 	br	584c <alt_get_errno+0x28>
    5848:	d0a0c204 	addi	r2,gp,-31992
}
    584c:	e037883a 	mov	sp,fp
    5850:	dfc00117 	ldw	ra,4(sp)
    5854:	df000017 	ldw	fp,0(sp)
    5858:	dec00204 	addi	sp,sp,8
    585c:	f800283a 	ret

00005860 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5860:	defffb04 	addi	sp,sp,-20
    5864:	dfc00415 	stw	ra,16(sp)
    5868:	df000315 	stw	fp,12(sp)
    586c:	dc000215 	stw	r16,8(sp)
    5870:	df000304 	addi	fp,sp,12
    5874:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5878:	e0bffe17 	ldw	r2,-8(fp)
    587c:	10800217 	ldw	r2,8(r2)
    5880:	10d00034 	orhi	r3,r2,16384
    5884:	e0bffe17 	ldw	r2,-8(fp)
    5888:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    588c:	e03ffd15 	stw	zero,-12(fp)
    5890:	00002306 	br	5920 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5894:	04000034 	movhi	r16,0
    5898:	8418d604 	addi	r16,r16,25432
    589c:	e0bffd17 	ldw	r2,-12(fp)
    58a0:	01400304 	movi	r5,12
    58a4:	1009883a 	mov	r4,r2
    58a8:	0004df40 	call	4df4 <__mulsi3>
    58ac:	8085883a 	add	r2,r16,r2
    58b0:	10c00017 	ldw	r3,0(r2)
    58b4:	e0bffe17 	ldw	r2,-8(fp)
    58b8:	10800017 	ldw	r2,0(r2)
    58bc:	1880151e 	bne	r3,r2,5914 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    58c0:	04000034 	movhi	r16,0
    58c4:	8418d604 	addi	r16,r16,25432
    58c8:	e0bffd17 	ldw	r2,-12(fp)
    58cc:	01400304 	movi	r5,12
    58d0:	1009883a 	mov	r4,r2
    58d4:	0004df40 	call	4df4 <__mulsi3>
    58d8:	8085883a 	add	r2,r16,r2
    58dc:	10800204 	addi	r2,r2,8
    58e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    58e4:	10000b0e 	bge	r2,zero,5914 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    58e8:	01400304 	movi	r5,12
    58ec:	e13ffd17 	ldw	r4,-12(fp)
    58f0:	0004df40 	call	4df4 <__mulsi3>
    58f4:	1007883a 	mov	r3,r2
    58f8:	00800034 	movhi	r2,0
    58fc:	1098d604 	addi	r2,r2,25432
    5900:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5904:	e0bffe17 	ldw	r2,-8(fp)
    5908:	18800226 	beq	r3,r2,5914 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    590c:	00bffcc4 	movi	r2,-13
    5910:	00000806 	br	5934 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5914:	e0bffd17 	ldw	r2,-12(fp)
    5918:	10800044 	addi	r2,r2,1
    591c:	e0bffd15 	stw	r2,-12(fp)
    5920:	d0a00817 	ldw	r2,-32736(gp)
    5924:	1007883a 	mov	r3,r2
    5928:	e0bffd17 	ldw	r2,-12(fp)
    592c:	18bfd92e 	bgeu	r3,r2,5894 <_gp+0xffff73bc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5930:	0005883a 	mov	r2,zero
}
    5934:	e6ffff04 	addi	sp,fp,-4
    5938:	dfc00217 	ldw	ra,8(sp)
    593c:	df000117 	ldw	fp,4(sp)
    5940:	dc000017 	ldw	r16,0(sp)
    5944:	dec00304 	addi	sp,sp,12
    5948:	f800283a 	ret

0000594c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    594c:	defff604 	addi	sp,sp,-40
    5950:	dfc00915 	stw	ra,36(sp)
    5954:	df000815 	stw	fp,32(sp)
    5958:	df000804 	addi	fp,sp,32
    595c:	e13ffd15 	stw	r4,-12(fp)
    5960:	e17ffe15 	stw	r5,-8(fp)
    5964:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5968:	00bfffc4 	movi	r2,-1
    596c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    5970:	00bffb44 	movi	r2,-19
    5974:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    5978:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    597c:	d1600604 	addi	r5,gp,-32744
    5980:	e13ffd17 	ldw	r4,-12(fp)
    5984:	0005b500 	call	5b50 <alt_find_dev>
    5988:	e0bff815 	stw	r2,-32(fp)
    598c:	e0bff817 	ldw	r2,-32(fp)
    5990:	1000051e 	bne	r2,zero,59a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    5994:	e13ffd17 	ldw	r4,-12(fp)
    5998:	0005be00 	call	5be0 <alt_find_file>
    599c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    59a0:	00800044 	movi	r2,1
    59a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    59a8:	e0bff817 	ldw	r2,-32(fp)
    59ac:	10002b26 	beq	r2,zero,5a5c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    59b0:	e13ff817 	ldw	r4,-32(fp)
    59b4:	0005ce80 	call	5ce8 <alt_get_fd>
    59b8:	e0bff915 	stw	r2,-28(fp)
    59bc:	e0bff917 	ldw	r2,-28(fp)
    59c0:	1000030e 	bge	r2,zero,59d0 <open+0x84>
    {
      status = index;
    59c4:	e0bff917 	ldw	r2,-28(fp)
    59c8:	e0bffa15 	stw	r2,-24(fp)
    59cc:	00002506 	br	5a64 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    59d0:	01400304 	movi	r5,12
    59d4:	e13ff917 	ldw	r4,-28(fp)
    59d8:	0004df40 	call	4df4 <__mulsi3>
    59dc:	1007883a 	mov	r3,r2
    59e0:	00800034 	movhi	r2,0
    59e4:	1098d604 	addi	r2,r2,25432
    59e8:	1885883a 	add	r2,r3,r2
    59ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    59f0:	e0fffe17 	ldw	r3,-8(fp)
    59f4:	00900034 	movhi	r2,16384
    59f8:	10bfffc4 	addi	r2,r2,-1
    59fc:	1886703a 	and	r3,r3,r2
    5a00:	e0bffc17 	ldw	r2,-16(fp)
    5a04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5a08:	e0bffb17 	ldw	r2,-20(fp)
    5a0c:	1000051e 	bne	r2,zero,5a24 <open+0xd8>
    5a10:	e13ffc17 	ldw	r4,-16(fp)
    5a14:	00058600 	call	5860 <alt_file_locked>
    5a18:	e0bffa15 	stw	r2,-24(fp)
    5a1c:	e0bffa17 	ldw	r2,-24(fp)
    5a20:	10001016 	blt	r2,zero,5a64 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5a24:	e0bff817 	ldw	r2,-32(fp)
    5a28:	10800317 	ldw	r2,12(r2)
    5a2c:	10000826 	beq	r2,zero,5a50 <open+0x104>
    5a30:	e0bff817 	ldw	r2,-32(fp)
    5a34:	10800317 	ldw	r2,12(r2)
    5a38:	e1ffff17 	ldw	r7,-4(fp)
    5a3c:	e1bffe17 	ldw	r6,-8(fp)
    5a40:	e17ffd17 	ldw	r5,-12(fp)
    5a44:	e13ffc17 	ldw	r4,-16(fp)
    5a48:	103ee83a 	callr	r2
    5a4c:	00000106 	br	5a54 <open+0x108>
    5a50:	0005883a 	mov	r2,zero
    5a54:	e0bffa15 	stw	r2,-24(fp)
    5a58:	00000206 	br	5a64 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5a5c:	00bffb44 	movi	r2,-19
    5a60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5a64:	e0bffa17 	ldw	r2,-24(fp)
    5a68:	1000090e 	bge	r2,zero,5a90 <open+0x144>
  {
    alt_release_fd (index);  
    5a6c:	e13ff917 	ldw	r4,-28(fp)
    5a70:	0005aa80 	call	5aa8 <alt_release_fd>
    ALT_ERRNO = -status;
    5a74:	00058240 	call	5824 <alt_get_errno>
    5a78:	1007883a 	mov	r3,r2
    5a7c:	e0bffa17 	ldw	r2,-24(fp)
    5a80:	0085c83a 	sub	r2,zero,r2
    5a84:	18800015 	stw	r2,0(r3)
    return -1;
    5a88:	00bfffc4 	movi	r2,-1
    5a8c:	00000106 	br	5a94 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    5a90:	e0bff917 	ldw	r2,-28(fp)
}
    5a94:	e037883a 	mov	sp,fp
    5a98:	dfc00117 	ldw	ra,4(sp)
    5a9c:	df000017 	ldw	fp,0(sp)
    5aa0:	dec00204 	addi	sp,sp,8
    5aa4:	f800283a 	ret

00005aa8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5aa8:	defffc04 	addi	sp,sp,-16
    5aac:	dfc00315 	stw	ra,12(sp)
    5ab0:	df000215 	stw	fp,8(sp)
    5ab4:	dc000115 	stw	r16,4(sp)
    5ab8:	df000204 	addi	fp,sp,8
    5abc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    5ac0:	e0bffe17 	ldw	r2,-8(fp)
    5ac4:	108000d0 	cmplti	r2,r2,3
    5ac8:	1000111e 	bne	r2,zero,5b10 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    5acc:	04000034 	movhi	r16,0
    5ad0:	8418d604 	addi	r16,r16,25432
    5ad4:	e0bffe17 	ldw	r2,-8(fp)
    5ad8:	01400304 	movi	r5,12
    5adc:	1009883a 	mov	r4,r2
    5ae0:	0004df40 	call	4df4 <__mulsi3>
    5ae4:	8085883a 	add	r2,r16,r2
    5ae8:	10800204 	addi	r2,r2,8
    5aec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    5af0:	04000034 	movhi	r16,0
    5af4:	8418d604 	addi	r16,r16,25432
    5af8:	e0bffe17 	ldw	r2,-8(fp)
    5afc:	01400304 	movi	r5,12
    5b00:	1009883a 	mov	r4,r2
    5b04:	0004df40 	call	4df4 <__mulsi3>
    5b08:	8085883a 	add	r2,r16,r2
    5b0c:	10000015 	stw	zero,0(r2)
  }
}
    5b10:	0001883a 	nop
    5b14:	e6ffff04 	addi	sp,fp,-4
    5b18:	dfc00217 	ldw	ra,8(sp)
    5b1c:	df000117 	ldw	fp,4(sp)
    5b20:	dc000017 	ldw	r16,0(sp)
    5b24:	dec00304 	addi	sp,sp,12
    5b28:	f800283a 	ret

00005b2c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    5b2c:	deffff04 	addi	sp,sp,-4
    5b30:	df000015 	stw	fp,0(sp)
    5b34:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5b38:	000170fa 	wrctl	ienable,zero
}
    5b3c:	0001883a 	nop
    5b40:	e037883a 	mov	sp,fp
    5b44:	df000017 	ldw	fp,0(sp)
    5b48:	dec00104 	addi	sp,sp,4
    5b4c:	f800283a 	ret

00005b50 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5b50:	defffa04 	addi	sp,sp,-24
    5b54:	dfc00515 	stw	ra,20(sp)
    5b58:	df000415 	stw	fp,16(sp)
    5b5c:	df000404 	addi	fp,sp,16
    5b60:	e13ffe15 	stw	r4,-8(fp)
    5b64:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5b68:	e0bfff17 	ldw	r2,-4(fp)
    5b6c:	10800017 	ldw	r2,0(r2)
    5b70:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5b74:	e13ffe17 	ldw	r4,-8(fp)
    5b78:	00045600 	call	4560 <strlen>
    5b7c:	10800044 	addi	r2,r2,1
    5b80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5b84:	00000d06 	br	5bbc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5b88:	e0bffc17 	ldw	r2,-16(fp)
    5b8c:	10800217 	ldw	r2,8(r2)
    5b90:	e0fffd17 	ldw	r3,-12(fp)
    5b94:	180d883a 	mov	r6,r3
    5b98:	e17ffe17 	ldw	r5,-8(fp)
    5b9c:	1009883a 	mov	r4,r2
    5ba0:	0005de00 	call	5de0 <memcmp>
    5ba4:	1000021e 	bne	r2,zero,5bb0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5ba8:	e0bffc17 	ldw	r2,-16(fp)
    5bac:	00000706 	br	5bcc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5bb0:	e0bffc17 	ldw	r2,-16(fp)
    5bb4:	10800017 	ldw	r2,0(r2)
    5bb8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5bbc:	e0fffc17 	ldw	r3,-16(fp)
    5bc0:	e0bfff17 	ldw	r2,-4(fp)
    5bc4:	18bff01e 	bne	r3,r2,5b88 <_gp+0xffff76b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5bc8:	0005883a 	mov	r2,zero
}
    5bcc:	e037883a 	mov	sp,fp
    5bd0:	dfc00117 	ldw	ra,4(sp)
    5bd4:	df000017 	ldw	fp,0(sp)
    5bd8:	dec00204 	addi	sp,sp,8
    5bdc:	f800283a 	ret

00005be0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5be0:	defffb04 	addi	sp,sp,-20
    5be4:	dfc00415 	stw	ra,16(sp)
    5be8:	df000315 	stw	fp,12(sp)
    5bec:	df000304 	addi	fp,sp,12
    5bf0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5bf4:	d0a00417 	ldw	r2,-32752(gp)
    5bf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5bfc:	00003106 	br	5cc4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    5c00:	e0bffd17 	ldw	r2,-12(fp)
    5c04:	10800217 	ldw	r2,8(r2)
    5c08:	1009883a 	mov	r4,r2
    5c0c:	00045600 	call	4560 <strlen>
    5c10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5c14:	e0bffd17 	ldw	r2,-12(fp)
    5c18:	10c00217 	ldw	r3,8(r2)
    5c1c:	e0bffe17 	ldw	r2,-8(fp)
    5c20:	10bfffc4 	addi	r2,r2,-1
    5c24:	1885883a 	add	r2,r3,r2
    5c28:	10800003 	ldbu	r2,0(r2)
    5c2c:	10803fcc 	andi	r2,r2,255
    5c30:	1080201c 	xori	r2,r2,128
    5c34:	10bfe004 	addi	r2,r2,-128
    5c38:	10800bd8 	cmpnei	r2,r2,47
    5c3c:	1000031e 	bne	r2,zero,5c4c <alt_find_file+0x6c>
    {
      len -= 1;
    5c40:	e0bffe17 	ldw	r2,-8(fp)
    5c44:	10bfffc4 	addi	r2,r2,-1
    5c48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5c4c:	e0bffe17 	ldw	r2,-8(fp)
    5c50:	e0ffff17 	ldw	r3,-4(fp)
    5c54:	1885883a 	add	r2,r3,r2
    5c58:	10800003 	ldbu	r2,0(r2)
    5c5c:	10803fcc 	andi	r2,r2,255
    5c60:	1080201c 	xori	r2,r2,128
    5c64:	10bfe004 	addi	r2,r2,-128
    5c68:	10800be0 	cmpeqi	r2,r2,47
    5c6c:	1000081e 	bne	r2,zero,5c90 <alt_find_file+0xb0>
    5c70:	e0bffe17 	ldw	r2,-8(fp)
    5c74:	e0ffff17 	ldw	r3,-4(fp)
    5c78:	1885883a 	add	r2,r3,r2
    5c7c:	10800003 	ldbu	r2,0(r2)
    5c80:	10803fcc 	andi	r2,r2,255
    5c84:	1080201c 	xori	r2,r2,128
    5c88:	10bfe004 	addi	r2,r2,-128
    5c8c:	10000a1e 	bne	r2,zero,5cb8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    5c90:	e0bffd17 	ldw	r2,-12(fp)
    5c94:	10800217 	ldw	r2,8(r2)
    5c98:	e0fffe17 	ldw	r3,-8(fp)
    5c9c:	180d883a 	mov	r6,r3
    5ca0:	e17fff17 	ldw	r5,-4(fp)
    5ca4:	1009883a 	mov	r4,r2
    5ca8:	0005de00 	call	5de0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5cac:	1000021e 	bne	r2,zero,5cb8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5cb0:	e0bffd17 	ldw	r2,-12(fp)
    5cb4:	00000706 	br	5cd4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    5cb8:	e0bffd17 	ldw	r2,-12(fp)
    5cbc:	10800017 	ldw	r2,0(r2)
    5cc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5cc4:	e0fffd17 	ldw	r3,-12(fp)
    5cc8:	d0a00404 	addi	r2,gp,-32752
    5ccc:	18bfcc1e 	bne	r3,r2,5c00 <_gp+0xffff7728>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5cd0:	0005883a 	mov	r2,zero
}
    5cd4:	e037883a 	mov	sp,fp
    5cd8:	dfc00117 	ldw	ra,4(sp)
    5cdc:	df000017 	ldw	fp,0(sp)
    5ce0:	dec00204 	addi	sp,sp,8
    5ce4:	f800283a 	ret

00005ce8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5ce8:	defffa04 	addi	sp,sp,-24
    5cec:	dfc00515 	stw	ra,20(sp)
    5cf0:	df000415 	stw	fp,16(sp)
    5cf4:	dc000315 	stw	r16,12(sp)
    5cf8:	df000404 	addi	fp,sp,16
    5cfc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    5d00:	00bffa04 	movi	r2,-24
    5d04:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5d08:	e03ffc15 	stw	zero,-16(fp)
    5d0c:	00001d06 	br	5d84 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    5d10:	04000034 	movhi	r16,0
    5d14:	8418d604 	addi	r16,r16,25432
    5d18:	e0bffc17 	ldw	r2,-16(fp)
    5d1c:	01400304 	movi	r5,12
    5d20:	1009883a 	mov	r4,r2
    5d24:	0004df40 	call	4df4 <__mulsi3>
    5d28:	8085883a 	add	r2,r16,r2
    5d2c:	10800017 	ldw	r2,0(r2)
    5d30:	1000111e 	bne	r2,zero,5d78 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    5d34:	04000034 	movhi	r16,0
    5d38:	8418d604 	addi	r16,r16,25432
    5d3c:	e0bffc17 	ldw	r2,-16(fp)
    5d40:	01400304 	movi	r5,12
    5d44:	1009883a 	mov	r4,r2
    5d48:	0004df40 	call	4df4 <__mulsi3>
    5d4c:	8085883a 	add	r2,r16,r2
    5d50:	e0fffe17 	ldw	r3,-8(fp)
    5d54:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    5d58:	d0e00817 	ldw	r3,-32736(gp)
    5d5c:	e0bffc17 	ldw	r2,-16(fp)
    5d60:	1880020e 	bge	r3,r2,5d6c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    5d64:	e0bffc17 	ldw	r2,-16(fp)
    5d68:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    5d6c:	e0bffc17 	ldw	r2,-16(fp)
    5d70:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    5d74:	00000606 	br	5d90 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5d78:	e0bffc17 	ldw	r2,-16(fp)
    5d7c:	10800044 	addi	r2,r2,1
    5d80:	e0bffc15 	stw	r2,-16(fp)
    5d84:	e0bffc17 	ldw	r2,-16(fp)
    5d88:	10800810 	cmplti	r2,r2,32
    5d8c:	103fe01e 	bne	r2,zero,5d10 <_gp+0xffff7838>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5d90:	e0bffd17 	ldw	r2,-12(fp)
}
    5d94:	e6ffff04 	addi	sp,fp,-4
    5d98:	dfc00217 	ldw	ra,8(sp)
    5d9c:	df000117 	ldw	fp,4(sp)
    5da0:	dc000017 	ldw	r16,0(sp)
    5da4:	dec00304 	addi	sp,sp,12
    5da8:	f800283a 	ret

00005dac <atexit>:
    5dac:	200b883a 	mov	r5,r4
    5db0:	000f883a 	mov	r7,zero
    5db4:	000d883a 	mov	r6,zero
    5db8:	0009883a 	mov	r4,zero
    5dbc:	0005e101 	jmpi	5e10 <__register_exitproc>

00005dc0 <exit>:
    5dc0:	defffe04 	addi	sp,sp,-8
    5dc4:	000b883a 	mov	r5,zero
    5dc8:	dc000015 	stw	r16,0(sp)
    5dcc:	dfc00115 	stw	ra,4(sp)
    5dd0:	2021883a 	mov	r16,r4
    5dd4:	0005f680 	call	5f68 <__call_exitprocs>
    5dd8:	8009883a 	mov	r4,r16
    5ddc:	00060f80 	call	60f8 <_exit>

00005de0 <memcmp>:
    5de0:	218d883a 	add	r6,r4,r6
    5de4:	21800826 	beq	r4,r6,5e08 <memcmp+0x28>
    5de8:	20800003 	ldbu	r2,0(r4)
    5dec:	28c00003 	ldbu	r3,0(r5)
    5df0:	10c00226 	beq	r2,r3,5dfc <memcmp+0x1c>
    5df4:	10c5c83a 	sub	r2,r2,r3
    5df8:	f800283a 	ret
    5dfc:	21000044 	addi	r4,r4,1
    5e00:	29400044 	addi	r5,r5,1
    5e04:	003ff706 	br	5de4 <_gp+0xffff790c>
    5e08:	0005883a 	mov	r2,zero
    5e0c:	f800283a 	ret

00005e10 <__register_exitproc>:
    5e10:	00800034 	movhi	r2,0
    5e14:	10993804 	addi	r2,r2,25824
    5e18:	10c00017 	ldw	r3,0(r2)
    5e1c:	defff904 	addi	sp,sp,-28
    5e20:	dc000015 	stw	r16,0(sp)
    5e24:	1c000c17 	ldw	r16,48(r3)
    5e28:	dd400515 	stw	r21,20(sp)
    5e2c:	dd000415 	stw	r20,16(sp)
    5e30:	dcc00315 	stw	r19,12(sp)
    5e34:	dc800215 	stw	r18,8(sp)
    5e38:	dc400115 	stw	r17,4(sp)
    5e3c:	dfc00615 	stw	ra,24(sp)
    5e40:	202b883a 	mov	r21,r4
    5e44:	2823883a 	mov	r17,r5
    5e48:	3027883a 	mov	r19,r6
    5e4c:	3825883a 	mov	r18,r7
    5e50:	1029883a 	mov	r20,r2
    5e54:	8000021e 	bne	r16,zero,5e60 <__register_exitproc+0x50>
    5e58:	1c000d04 	addi	r16,r3,52
    5e5c:	1c000c15 	stw	r16,48(r3)
    5e60:	80800117 	ldw	r2,4(r16)
    5e64:	00c007c4 	movi	r3,31
    5e68:	1880110e 	bge	r3,r2,5eb0 <__register_exitproc+0xa0>
    5e6c:	00800034 	movhi	r2,0
    5e70:	10800004 	addi	r2,r2,0
    5e74:	1000021e 	bne	r2,zero,5e80 <__register_exitproc+0x70>
    5e78:	00bfffc4 	movi	r2,-1
    5e7c:	00003106 	br	5f44 <__register_exitproc+0x134>
    5e80:	01002304 	movi	r4,140
    5e84:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    5e88:	1021883a 	mov	r16,r2
    5e8c:	103ffa26 	beq	r2,zero,5e78 <_gp+0xffff79a0>
    5e90:	10000115 	stw	zero,4(r2)
    5e94:	a0800017 	ldw	r2,0(r20)
    5e98:	10c00c17 	ldw	r3,48(r2)
    5e9c:	80c00015 	stw	r3,0(r16)
    5ea0:	14000c15 	stw	r16,48(r2)
    5ea4:	80002215 	stw	zero,136(r16)
    5ea8:	a8001d26 	beq	r21,zero,5f20 <__register_exitproc+0x110>
    5eac:	00000606 	br	5ec8 <__register_exitproc+0xb8>
    5eb0:	a8001b26 	beq	r21,zero,5f20 <__register_exitproc+0x110>
    5eb4:	80802217 	ldw	r2,136(r16)
    5eb8:	1000091e 	bne	r2,zero,5ee0 <__register_exitproc+0xd0>
    5ebc:	00800034 	movhi	r2,0
    5ec0:	10800004 	addi	r2,r2,0
    5ec4:	103fec26 	beq	r2,zero,5e78 <_gp+0xffff79a0>
    5ec8:	01004204 	movi	r4,264
    5ecc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    5ed0:	103fe926 	beq	r2,zero,5e78 <_gp+0xffff79a0>
    5ed4:	10004015 	stw	zero,256(r2)
    5ed8:	10004115 	stw	zero,260(r2)
    5edc:	80802215 	stw	r2,136(r16)
    5ee0:	81400117 	ldw	r5,4(r16)
    5ee4:	01000044 	movi	r4,1
    5ee8:	2947883a 	add	r3,r5,r5
    5eec:	18c7883a 	add	r3,r3,r3
    5ef0:	10c7883a 	add	r3,r2,r3
    5ef4:	1cc00015 	stw	r19,0(r3)
    5ef8:	2148983a 	sll	r4,r4,r5
    5efc:	11404017 	ldw	r5,256(r2)
    5f00:	290ab03a 	or	r5,r5,r4
    5f04:	11404015 	stw	r5,256(r2)
    5f08:	1c802015 	stw	r18,128(r3)
    5f0c:	00c00084 	movi	r3,2
    5f10:	a8c0031e 	bne	r21,r3,5f20 <__register_exitproc+0x110>
    5f14:	10c04117 	ldw	r3,260(r2)
    5f18:	1908b03a 	or	r4,r3,r4
    5f1c:	11004115 	stw	r4,260(r2)
    5f20:	80800117 	ldw	r2,4(r16)
    5f24:	10c00044 	addi	r3,r2,1
    5f28:	10800084 	addi	r2,r2,2
    5f2c:	1085883a 	add	r2,r2,r2
    5f30:	1085883a 	add	r2,r2,r2
    5f34:	80c00115 	stw	r3,4(r16)
    5f38:	80a1883a 	add	r16,r16,r2
    5f3c:	84400015 	stw	r17,0(r16)
    5f40:	0005883a 	mov	r2,zero
    5f44:	dfc00617 	ldw	ra,24(sp)
    5f48:	dd400517 	ldw	r21,20(sp)
    5f4c:	dd000417 	ldw	r20,16(sp)
    5f50:	dcc00317 	ldw	r19,12(sp)
    5f54:	dc800217 	ldw	r18,8(sp)
    5f58:	dc400117 	ldw	r17,4(sp)
    5f5c:	dc000017 	ldw	r16,0(sp)
    5f60:	dec00704 	addi	sp,sp,28
    5f64:	f800283a 	ret

00005f68 <__call_exitprocs>:
    5f68:	defff504 	addi	sp,sp,-44
    5f6c:	dd000515 	stw	r20,20(sp)
    5f70:	05000034 	movhi	r20,0
    5f74:	dc800315 	stw	r18,12(sp)
    5f78:	dfc00a15 	stw	ra,40(sp)
    5f7c:	df000915 	stw	fp,36(sp)
    5f80:	ddc00815 	stw	r23,32(sp)
    5f84:	dd800715 	stw	r22,28(sp)
    5f88:	dd400615 	stw	r21,24(sp)
    5f8c:	dcc00415 	stw	r19,16(sp)
    5f90:	dc400215 	stw	r17,8(sp)
    5f94:	dc000115 	stw	r16,4(sp)
    5f98:	d9000015 	stw	r4,0(sp)
    5f9c:	2825883a 	mov	r18,r5
    5fa0:	a5193804 	addi	r20,r20,25824
    5fa4:	a4400017 	ldw	r17,0(r20)
    5fa8:	8cc00c17 	ldw	r19,48(r17)
    5fac:	8c400c04 	addi	r17,r17,48
    5fb0:	98004526 	beq	r19,zero,60c8 <__call_exitprocs+0x160>
    5fb4:	9c000117 	ldw	r16,4(r19)
    5fb8:	00900034 	movhi	r2,16384
    5fbc:	10bfffc4 	addi	r2,r2,-1
    5fc0:	9d402217 	ldw	r21,136(r19)
    5fc4:	85bfffc4 	addi	r22,r16,-1
    5fc8:	80a1883a 	add	r16,r16,r2
    5fcc:	8421883a 	add	r16,r16,r16
    5fd0:	8421883a 	add	r16,r16,r16
    5fd4:	ac2f883a 	add	r23,r21,r16
    5fd8:	84000204 	addi	r16,r16,8
    5fdc:	9c21883a 	add	r16,r19,r16
    5fe0:	b0002716 	blt	r22,zero,6080 <__call_exitprocs+0x118>
    5fe4:	90000726 	beq	r18,zero,6004 <__call_exitprocs+0x9c>
    5fe8:	a800041e 	bne	r21,zero,5ffc <__call_exitprocs+0x94>
    5fec:	b5bfffc4 	addi	r22,r22,-1
    5ff0:	bdffff04 	addi	r23,r23,-4
    5ff4:	843fff04 	addi	r16,r16,-4
    5ff8:	003ff906 	br	5fe0 <_gp+0xffff7b08>
    5ffc:	b9002017 	ldw	r4,128(r23)
    6000:	913ffa1e 	bne	r18,r4,5fec <_gp+0xffff7b14>
    6004:	99000117 	ldw	r4,4(r19)
    6008:	82000017 	ldw	r8,0(r16)
    600c:	213fffc4 	addi	r4,r4,-1
    6010:	b100021e 	bne	r22,r4,601c <__call_exitprocs+0xb4>
    6014:	9d800115 	stw	r22,4(r19)
    6018:	00000106 	br	6020 <__call_exitprocs+0xb8>
    601c:	80000015 	stw	zero,0(r16)
    6020:	403ff226 	beq	r8,zero,5fec <_gp+0xffff7b14>
    6024:	9f000117 	ldw	fp,4(r19)
    6028:	a8000526 	beq	r21,zero,6040 <__call_exitprocs+0xd8>
    602c:	00800044 	movi	r2,1
    6030:	1592983a 	sll	r9,r2,r22
    6034:	a9404017 	ldw	r5,256(r21)
    6038:	494a703a 	and	r5,r9,r5
    603c:	2800021e 	bne	r5,zero,6048 <__call_exitprocs+0xe0>
    6040:	403ee83a 	callr	r8
    6044:	00000906 	br	606c <__call_exitprocs+0x104>
    6048:	a9004117 	ldw	r4,260(r21)
    604c:	4908703a 	and	r4,r9,r4
    6050:	2000041e 	bne	r4,zero,6064 <__call_exitprocs+0xfc>
    6054:	b9400017 	ldw	r5,0(r23)
    6058:	d9000017 	ldw	r4,0(sp)
    605c:	403ee83a 	callr	r8
    6060:	00000206 	br	606c <__call_exitprocs+0x104>
    6064:	b9000017 	ldw	r4,0(r23)
    6068:	403ee83a 	callr	r8
    606c:	99000117 	ldw	r4,4(r19)
    6070:	e13fcc1e 	bne	fp,r4,5fa4 <_gp+0xffff7acc>
    6074:	89000017 	ldw	r4,0(r17)
    6078:	993fdc26 	beq	r19,r4,5fec <_gp+0xffff7b14>
    607c:	003fc906 	br	5fa4 <_gp+0xffff7acc>
    6080:	00800034 	movhi	r2,0
    6084:	10800004 	addi	r2,r2,0
    6088:	10000f26 	beq	r2,zero,60c8 <__call_exitprocs+0x160>
    608c:	99400117 	ldw	r5,4(r19)
    6090:	99000017 	ldw	r4,0(r19)
    6094:	2800091e 	bne	r5,zero,60bc <__call_exitprocs+0x154>
    6098:	20000826 	beq	r4,zero,60bc <__call_exitprocs+0x154>
    609c:	89000015 	stw	r4,0(r17)
    60a0:	a8000226 	beq	r21,zero,60ac <__call_exitprocs+0x144>
    60a4:	a809883a 	mov	r4,r21
    60a8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    60ac:	9809883a 	mov	r4,r19
    60b0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    60b4:	8cc00017 	ldw	r19,0(r17)
    60b8:	003fbd06 	br	5fb0 <_gp+0xffff7ad8>
    60bc:	9823883a 	mov	r17,r19
    60c0:	2027883a 	mov	r19,r4
    60c4:	003fba06 	br	5fb0 <_gp+0xffff7ad8>
    60c8:	dfc00a17 	ldw	ra,40(sp)
    60cc:	df000917 	ldw	fp,36(sp)
    60d0:	ddc00817 	ldw	r23,32(sp)
    60d4:	dd800717 	ldw	r22,28(sp)
    60d8:	dd400617 	ldw	r21,24(sp)
    60dc:	dd000517 	ldw	r20,20(sp)
    60e0:	dcc00417 	ldw	r19,16(sp)
    60e4:	dc800317 	ldw	r18,12(sp)
    60e8:	dc400217 	ldw	r17,8(sp)
    60ec:	dc000117 	ldw	r16,4(sp)
    60f0:	dec00b04 	addi	sp,sp,44
    60f4:	f800283a 	ret

000060f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    60f8:	defffd04 	addi	sp,sp,-12
    60fc:	df000215 	stw	fp,8(sp)
    6100:	df000204 	addi	fp,sp,8
    6104:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    6108:	0001883a 	nop
    610c:	e0bfff17 	ldw	r2,-4(fp)
    6110:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    6114:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    6118:	10000226 	beq	r2,zero,6124 <_exit+0x2c>
    ALT_SIM_FAIL();
    611c:	002af070 	cmpltui	zero,zero,43969
    6120:	00000106 	br	6128 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    6124:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6128:	003fff06 	br	6128 <_gp+0xffff7c50>
